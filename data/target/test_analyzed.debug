Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "unit_test" }, body_index: 4, param_count: 2, generic_count: 0 }) }>(test::::unit_test(_,_))
  a: unit
  b: unit
-> unit
Expr type: unit
Block (returns: true) {
  Expr type: unit
  ValueOfAssignable
    LocalVariable(a)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "vec"] }, item_name: "foreach" }, body_index: 56, param_count: 2, generic_count: 1 }) }>(test::std::vec::foreach<_>(_,_))
  fn: fn(<0> of test::std::vec::foreach<_>(_,_))->unit
  this: test::std::vec::Vec<<0> of test::std::vec::foreach<_>(_,_)>
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  Declaration(i)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        LocalVariable(i)
      Expr type: int
      FieldAccess(size)
        Expr type: test::std::vec::Vec<<0> of test::std::vec::foreach<_>(_,_)>
        ValueOfAssignable
          LocalVariable(this)
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      FunctionCall
        Expr type: fn(<0> of test::std::vec::foreach<_>(_,_))->unit
        ValueOfAssignable
          LocalVariable(fn)
        Expr type: <0> of test::std::vec::foreach<_>(_,_)
        FunctionCall
          Function(test::std::vec::get<<0> of test::std::vec::foreach<_>(_,_)>(test::std::vec::Vec<<0> of test::std::vec::foreach<_>(_,_)>,int))
          Expr type: test::std::vec::Vec<<0> of test::std::vec::foreach<_>(_,_)>
          ValueOfAssignable
            LocalVariable(this)
          Expr type: int
          ValueOfAssignable
            LocalVariable(i)
      Expr type: int
      Increment(false)
        LocalVariable(i)
    }
  }
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "vec"] }, item_name: "create_sized_vec" }, body_index: 50, param_count: 1, generic_count: 1 }) }>(test::std::vec::create_sized_vec<_>(_))
  size: int
-> test::std::vec::Vec<<0> of test::std::vec::create_sized_vec<_>(_)>
Expr type: test::std::vec::Vec<<0> of test::std::vec::create_sized_vec<_>(_)>
Block (returns: true) {
  Expr type: unit
  Declaration(arr)
    Expr type: test::std::vec::Vec<<0> of test::std::vec::create_sized_vec<_>(_)>
    Struct
      data: 
      Expr type: &<0> of test::std::vec::create_sized_vec<_>(_)
      FunctionCall
        Function(test::std::mem::malloc<<0> of test::std::vec::create_sized_vec<_>(_)>(int))
        Expr type: int
        ValueOfAssignable
          LocalVariable(size)
      size: 
      Expr type: int
      ValueOfAssignable
        LocalVariable(size)
      capacity: 
      Expr type: int
      ValueOfAssignable
        LocalVariable(size)
  Expr type: unit
  FunctionCall
    Function(test::std::mem::memset<<0> of test::std::vec::create_sized_vec<_>(_)>(&<0> of test::std::vec::create_sized_vec<_>(_),int,int))
    Expr type: &<0> of test::std::vec::create_sized_vec<_>(_)
    FieldAccess(data)
      Expr type: test::std::vec::Vec<<0> of test::std::vec::create_sized_vec<_>(_)>
      ValueOfAssignable
        LocalVariable(arr)
    Expr type: int
    Literal(Integer(0))
    Expr type: int
    ValueOfAssignable
      LocalVariable(size)
  Expr type: test::std::vec::Vec<<0> of test::std::vec::create_sized_vec<_>(_)>
  ValueOfAssignable
    LocalVariable(arr)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "io"] }, item_name: "close" }, body_index: 68, param_count: 1, generic_count: 0 }) }>(test::std::io::close(_))
  this: test::std::io::File
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(builtin::::fclose(int))
    Expr type: int
    FieldAccess(file)
      Expr type: test::std::io::File
      ValueOfAssignable
        LocalVariable(this)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "string"] }, item_name: "print" }, body_index: 36, param_count: 1, generic_count: 0 }) }>(test::std::string::print(_))
  this: test::std::vec::Vec<char>
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(builtin::::write(&char,int))
    Expr type: &char
    FieldAccess(data)
      Expr type: test::std::vec::Vec<char>
      ValueOfAssignable
        LocalVariable(this)
    Expr type: int
    FieldAccess(size)
      Expr type: test::std::vec::Vec<char>
      ValueOfAssignable
        LocalVariable(this)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "print"] }, item_name: "println" }, body_index: 23, param_count: 1, generic_count: 0 }) }>(test::std::print::println(_))
  c: char
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(builtin::::write_char(char))
    Expr type: char
    ValueOfAssignable
      LocalVariable(c)
  Expr type: unit
  FunctionCall
    Function(builtin::::write_char(char))
    Expr type: char
    Literal(Char(10))
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "vec"] }, item_name: "set" }, body_index: 45, param_count: 3, generic_count: 1 }) }>(test::std::vec::set<_>(_,_,_))
  value: <0> of test::std::vec::set<_>(_,_,_)
  index: int
  this: &test::std::vec::Vec<<0> of test::std::vec::set<_>(_,_,_)>
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  If {
    Expr type: bool
    Binary(Logical(Or))
      Expr type: bool
      Binary(Comparison(Less))
        Expr type: int
        ValueOfAssignable
          LocalVariable(index)
        Expr type: int
        Literal(Integer(0))
      Expr type: bool
      Binary(Comparison(GreaterEquals))
        Expr type: int
        ValueOfAssignable
          LocalVariable(index)
        Expr type: int
        ValueOfAssignable
          PointerFieldAccess(size, 1)
            Expr type: &test::std::vec::Vec<<0> of test::std::vec::set<_>(_,_,_)>
            ValueOfAssignable
              LocalVariable(this)
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      FunctionCall
        Function(test::std::panic::panic(&char))
        Expr type: &char
        ConstantPointer(String([73, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 0]))
    }
  }
  Expr type: <0> of test::std::vec::set<_>(_,_,_)
  Assign(Assign)
    ArrayIndex
      Expr type: &<0> of test::std::vec::set<_>(_,_,_)
      ValueOfAssignable
        PointerFieldAccess(data, 1)
          Expr type: &test::std::vec::Vec<<0> of test::std::vec::set<_>(_,_,_)>
          ValueOfAssignable
            LocalVariable(this)
      Expr type: int
      ValueOfAssignable
        LocalVariable(index)
    Expr type: <0> of test::std::vec::set<_>(_,_,_)
    ValueOfAssignable
      LocalVariable(value)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "print"] }, item_name: "println" }, body_index: 21, param_count: 1, generic_count: 0 }) }>(test::std::print::println(_))
  literal: &char
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(test::std::print::print(&char))
    Expr type: &char
    ValueOfAssignable
      LocalVariable(literal)
  Expr type: unit
  FunctionCall
    Function(builtin::::write_char(char))
    Expr type: char
    Literal(Char(10))
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "vec"] }, item_name: "set" }, body_index: 46, param_count: 3, generic_count: 1 }) }>(test::std::vec::set<_>(_,_,_))
  value: <0> of test::std::vec::set<_>(_,_,_)
  index: int
  this: test::std::vec::Vec<<0> of test::std::vec::set<_>(_,_,_)>
-> unit
Expr type: unit
Block (returns: true) {
  Expr type: unit
  FunctionCall
    Function(test::std::vec::set<<0> of test::std::vec::set<_>(_,_,_)>(&test::std::vec::Vec<<0> of test::std::vec::set<_>(_,_,_)>,int,<0> of test::std::vec::set<_>(_,_,_)))
    Expr type: &test::std::vec::Vec<<0> of test::std::vec::set<_>(_,_,_)>
    Borrow
      LocalVariable(this)
    Expr type: int
    ValueOfAssignable
      LocalVariable(index)
    Expr type: <0> of test::std::vec::set<_>(_,_,_)
    ValueOfAssignable
      LocalVariable(value)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "mem"] }, item_name: "malloc" }, body_index: 30, param_count: 1, generic_count: 1 }) }>(test::std::mem::malloc<_>(_))
  size: int
-> &<0> of test::std::mem::malloc<_>(_)
Expr type: &<0> of test::std::mem::malloc<_>(_)
Block (returns: true) {
  Expr type: &<0> of test::std::mem::malloc<_>(_)
  Unary(Cast)
    Expr type: &unit
    FunctionCall
      Function(builtin::::malloc(int))
      Expr type: int
      Binary(Math(Mul))
        Expr type: int
        ValueOfAssignable
          LocalVariable(size)
        Expr type: int
        Sizeof(GenericType(GenericId { kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "mem"] }, item_name: "malloc" }, body_index: 30, param_count: 1, generic_count: 1 }), index: 0 }))
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "array"] }, item_name: "filter" }, body_index: 64, param_count: 2, generic_count: 1 }) }>(test::std::array::filter<_>(_,_))
  this: test::std::array::Array<<0> of test::std::array::filter<_>(_,_)>
  fn: fn(<0> of test::std::array::filter<_>(_,_))->bool
-> test::std::array::Array<<0> of test::std::array::filter<_>(_,_)>
Expr type: test::std::array::Array<<0> of test::std::array::filter<_>(_,_)>
Block (returns: true) {
  Expr type: unit
  Declaration(arr)
    Expr type: test::std::array::Array<<0> of test::std::array::filter<_>(_,_)>
    FunctionCall
      Function(test::std::array::create_array<<0> of test::std::array::filter<_>(_,_)>(int))
      Expr type: int
      FieldAccess(size)
        Expr type: test::std::array::Array<<0> of test::std::array::filter<_>(_,_)>
        ValueOfAssignable
          LocalVariable(this)
  Expr type: unit
  Declaration(i)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  Declaration(j)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        LocalVariable(i)
      Expr type: int
      FieldAccess(size)
        Expr type: test::std::array::Array<<0> of test::std::array::filter<_>(_,_)>
        ValueOfAssignable
          LocalVariable(this)
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      If {
        Expr type: bool
        FunctionCall
          Expr type: fn(<0> of test::std::array::filter<_>(_,_))->bool
          ValueOfAssignable
            LocalVariable(fn)
          Expr type: <0> of test::std::array::filter<_>(_,_)
          FunctionCall
            Function(test::std::array::get<<0> of test::std::array::filter<_>(_,_)>(test::std::array::Array<<0> of test::std::array::filter<_>(_,_)>,int))
            Expr type: test::std::array::Array<<0> of test::std::array::filter<_>(_,_)>
            ValueOfAssignable
              LocalVariable(this)
            Expr type: int
            ValueOfAssignable
              LocalVariable(i)
        Expr type: unit
        Block (returns: false) {
          Expr type: unit
          FunctionCall
            Function(test::std::array::set<<0> of test::std::array::filter<_>(_,_)>(test::std::array::Array<<0> of test::std::array::filter<_>(_,_)>,int,<0> of test::std::array::filter<_>(_,_)))
            Expr type: test::std::array::Array<<0> of test::std::array::filter<_>(_,_)>
            ValueOfAssignable
              LocalVariable(arr)
            Expr type: int
            ValueOfAssignable
              LocalVariable(j)
            Expr type: <0> of test::std::array::filter<_>(_,_)
            FunctionCall
              Function(test::std::array::get<<0> of test::std::array::filter<_>(_,_)>(test::std::array::Array<<0> of test::std::array::filter<_>(_,_)>,int))
              Expr type: test::std::array::Array<<0> of test::std::array::filter<_>(_,_)>
              ValueOfAssignable
                LocalVariable(this)
              Expr type: int
              ValueOfAssignable
                LocalVariable(i)
          Expr type: int
          Increment(false)
            LocalVariable(j)
        }
      }
      Expr type: int
      Increment(false)
        LocalVariable(i)
    }
  }
  Expr type: test::std::array::Array<<0> of test::std::array::filter<_>(_,_)>
  ValueOfAssignable
    LocalVariable(arr)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "mul2" }, body_index: 5, param_count: 1, generic_count: 0 }) }>(test::::mul2(_))
  a: int
-> int
Expr type: int
Block (returns: true) {
  Expr type: int
  Binary(Math(Mul))
    Expr type: int
    ValueOfAssignable
      LocalVariable(a)
    Expr type: int
    Literal(Integer(2))
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["generic_test"] }, item_name: "test" }, body_index: 12, param_count: 0, generic_count: 0 }) }>(test::generic_test::test())
-> int
Expr type: int
Block (returns: true) {
  Expr type: unit
  Declaration(x)
    Expr type: test::generic_test::Option<int>
    Struct
      value: 
      Expr type: int
      Literal(Integer(10))
  Expr type: test::generic_test::Option<int>
  FunctionCall
    Function(test::generic_test::do_nothing<test::generic_test::Option<int>>(test::generic_test::Option<int>))
    Expr type: test::generic_test::Option<int>
    ValueOfAssignable
      LocalVariable(x)
  Expr type: unit
  Declaration(my_struct)
    Expr type: test::generic_test::MyStruct<int,int>
    FunctionCall
      Function(test::generic_test::createStruct<int,int>(int,int,int))
      Expr type: int
      Literal(Integer(10))
      Expr type: int
      Literal(Integer(20))
      Expr type: int
      Literal(Integer(30))
  Expr type: unit
  Declaration(my_struct2)
    Expr type: &test::generic_test::MyStruct<int,int>
    Borrow
      LocalVariable(my_struct)
  Expr type: unit
  Declaration(y)
    Expr type: test::generic_test::Option<int>
    ValueOfAssignable
      LocalVariable(x)
  Expr type: unit
  Declaration(z)
    Expr type: test::generic_test::TwoGenerics<int,int>
    Struct
      value: 
      Expr type: int
      Literal(Integer(10))
      value2: 
      Expr type: int
      Literal(Integer(20))
  Expr type: unit
  Declaration(w)
    Expr type: test::generic_test::NestedGeneric<int>
    Struct
      value: 
      Expr type: test::generic_test::Option<int>
      ValueOfAssignable
        LocalVariable(x)
  Expr type: unit
  Declaration(a)
    Expr type: int
    FunctionCall
      Function(test::generic_test::generic_function<int>(int))
      Expr type: int
      Literal(Integer(10))
  Expr type: unit
  Declaration(b)
    Expr type: test::generic_test::Option<int>
    FunctionCall
      Function(test::generic_test::generic_function2<int>(test::generic_test::Option<int>))
      Expr type: test::generic_test::Option<int>
      ValueOfAssignable
        LocalVariable(x)
  Expr type: unit
  Declaration(b2)
    Expr type: test::generic_test::Option<test::generic_test::Option<int>>
    FunctionCall
      Function(test::generic_test::generic_function2<test::generic_test::Option<int>>(test::generic_test::Option<test::generic_test::Option<int>>))
      Expr type: test::generic_test::Option<test::generic_test::Option<int>>
      Struct
        value: 
        Expr type: test::generic_test::Option<int>
        ValueOfAssignable
          LocalVariable(x)
  Expr type: unit
  Declaration(c)
    Expr type: test::generic_test::TwoGenerics<char,test::generic_test::Option<char>>
    FunctionCall
      Function(test::generic_test::partial_generic_function<char>(char))
      Expr type: char
      Literal(Char(99))
  Expr type: int
  Binary(Math(Add))
    Expr type: int
    FunctionCall
      Function(test::generic_test::add1(int))
      Expr type: int
      FunctionCall
        Function(test::generic_test::generic_function<int>(int))
        Expr type: int
        FunctionCall
          Function(test::generic_test::add1(int))
          Expr type: int
          FieldAccess(value)
            Expr type: test::generic_test::Option<int>
            ValueOfAssignable
              LocalVariable(x)
    Expr type: int
    ValueOfAssignable
      LocalVariable(a)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["generic_test"] }, item_name: "generic_function2" }, body_index: 14, param_count: 1, generic_count: 1 }) }>(test::generic_test::generic_function2<_>(_))
  x: test::generic_test::Option<<0> of test::generic_test::generic_function2<_>(_)>
-> test::generic_test::Option<<0> of test::generic_test::generic_function2<_>(_)>
Expr type: test::generic_test::Option<<0> of test::generic_test::generic_function2<_>(_)>
Block (returns: true) {
  Expr type: test::generic_test::Option<<0> of test::generic_test::generic_function2<_>(_)>
  ValueOfAssignable
    LocalVariable(x)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "string"] }, item_name: "read_line" }, body_index: 39, param_count: 0, generic_count: 0 }) }>(test::std::string::read_line())
-> test::std::vec::Vec<char>
Expr type: test::std::vec::Vec<char>
Block (returns: true) {
  Expr type: unit
  Declaration(str)
    Expr type: test::std::vec::Vec<char>
    FunctionCall
      Function(test::std::string::create_string(int))
      Expr type: int
      Literal(Integer(100))
  Expr type: unit
  Declaration(i)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        LocalVariable(i)
      Expr type: int
      FieldAccess(size)
        Expr type: test::std::vec::Vec<char>
        ValueOfAssignable
          LocalVariable(str)
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      Declaration(c)
        Expr type: char
        FunctionCall
          Function(builtin::::read_char())
      Expr type: unit
      If {
        Expr type: bool
        Binary(Logical(Or))
          Expr type: bool
          Binary(Comparison(Equals))
            Expr type: char
            ValueOfAssignable
              LocalVariable(c)
            Expr type: char
            Literal(Char(10))
          Expr type: bool
          Binary(Comparison(Equals))
            Expr type: char
            ValueOfAssignable
              LocalVariable(c)
            Expr type: char
            Literal(Char(13))
        Expr type: unit
        Block (returns: false) {
          Expr type: unit
          Break {
          }
        }
      }
      Expr type: unit
      FunctionCall
        Function(test::std::vec::set<char>(&test::std::vec::Vec<char>,int,char))
        Expr type: &test::std::vec::Vec<char>
        Borrow
          LocalVariable(str)
        Expr type: int
        ValueOfAssignable
          LocalVariable(i)
        Expr type: char
        ValueOfAssignable
          LocalVariable(c)
      Expr type: int
      Increment(false)
        LocalVariable(i)
    }
  }
  Expr type: int
  Assign(Assign)
    FieldAccess(size)
      LocalVariable(str)
    Expr type: int
    ValueOfAssignable
      LocalVariable(i)
  Expr type: test::std::vec::Vec<char>
  ValueOfAssignable
    LocalVariable(str)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["generic_test"] }, item_name: "generic_function" }, body_index: 13, param_count: 1, generic_count: 1 }) }>(test::generic_test::generic_function<_>(_))
  x: <0> of test::generic_test::generic_function<_>(_)
-> <0> of test::generic_test::generic_function<_>(_)
Expr type: <0> of test::generic_test::generic_function<_>(_)
Block (returns: true) {
  Expr type: <0> of test::generic_test::generic_function<_>(_)
  ValueOfAssignable
    LocalVariable(x)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "vec"] }, item_name: "pop" }, body_index: 53, param_count: 1, generic_count: 1 }) }>(test::std::vec::pop<_>(_))
  this: &test::std::vec::Vec<<0> of test::std::vec::pop<_>(_)>
-> <0> of test::std::vec::pop<_>(_)
Expr type: <0> of test::std::vec::pop<_>(_)
Block (returns: true) {
  Expr type: unit
  If {
    Expr type: bool
    Binary(Comparison(Equals))
      Expr type: int
      ValueOfAssignable
        PointerFieldAccess(size, 1)
          Expr type: &test::std::vec::Vec<<0> of test::std::vec::pop<_>(_)>
          ValueOfAssignable
            LocalVariable(this)
      Expr type: int
      Literal(Integer(0))
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      FunctionCall
        Function(test::std::panic::panic(&char))
        Expr type: &char
        ConstantPointer(String([80, 111, 112, 32, 102, 114, 111, 109, 32, 101, 109, 112, 116, 121, 32, 86, 101, 99, 0]))
    }
  }
  Expr type: int
  Decrement(false)
    PointerFieldAccess(size, 1)
      Expr type: &test::std::vec::Vec<<0> of test::std::vec::pop<_>(_)>
      ValueOfAssignable
        LocalVariable(this)
  Expr type: unit
  Declaration(value)
    Expr type: <0> of test::std::vec::pop<_>(_)
    ValueOfAssignable
      ArrayIndex
        Expr type: &<0> of test::std::vec::pop<_>(_)
        ValueOfAssignable
          PointerFieldAccess(data, 1)
            Expr type: &test::std::vec::Vec<<0> of test::std::vec::pop<_>(_)>
            ValueOfAssignable
              LocalVariable(this)
        Expr type: int
        ValueOfAssignable
          PointerFieldAccess(size, 1)
            Expr type: &test::std::vec::Vec<<0> of test::std::vec::pop<_>(_)>
            ValueOfAssignable
              LocalVariable(this)
  Expr type: unit
  If {
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        PointerFieldAccess(size, 1)
          Expr type: &test::std::vec::Vec<<0> of test::std::vec::pop<_>(_)>
          ValueOfAssignable
            LocalVariable(this)
      Expr type: int
      Binary(Math(Div))
        Expr type: int
        ValueOfAssignable
          PointerFieldAccess(capacity, 1)
            Expr type: &test::std::vec::Vec<<0> of test::std::vec::pop<_>(_)>
            ValueOfAssignable
              LocalVariable(this)
        Expr type: int
        Literal(Integer(2))
    Expr type: unit
    Block (returns: false) {
      Expr type: int
      Assign(MathAssign(Div))
        PointerFieldAccess(capacity, 1)
          Expr type: &test::std::vec::Vec<<0> of test::std::vec::pop<_>(_)>
          ValueOfAssignable
            LocalVariable(this)
        Expr type: int
        Literal(Integer(2))
      Expr type: unit
      Declaration(new_data)
        Expr type: &<0> of test::std::vec::pop<_>(_)
        FunctionCall
          Function(test::std::mem::realloc<<0> of test::std::vec::pop<_>(_)>(&<0> of test::std::vec::pop<_>(_),int))
          Expr type: &<0> of test::std::vec::pop<_>(_)
          ValueOfAssignable
            PointerFieldAccess(data, 1)
              Expr type: &test::std::vec::Vec<<0> of test::std::vec::pop<_>(_)>
              ValueOfAssignable
                LocalVariable(this)
          Expr type: int
          ValueOfAssignable
            PointerFieldAccess(capacity, 1)
              Expr type: &test::std::vec::Vec<<0> of test::std::vec::pop<_>(_)>
              ValueOfAssignable
                LocalVariable(this)
      Expr type: unit
      FunctionCall
        Function(test::std::mem::memcopy<<0> of test::std::vec::pop<_>(_)>(&<0> of test::std::vec::pop<_>(_),&<0> of test::std::vec::pop<_>(_),int))
        Expr type: &<0> of test::std::vec::pop<_>(_)
        ValueOfAssignable
          PointerFieldAccess(data, 1)
            Expr type: &test::std::vec::Vec<<0> of test::std::vec::pop<_>(_)>
            ValueOfAssignable
              LocalVariable(this)
        Expr type: &<0> of test::std::vec::pop<_>(_)
        ValueOfAssignable
          LocalVariable(new_data)
        Expr type: int
        ValueOfAssignable
          PointerFieldAccess(size, 1)
            Expr type: &test::std::vec::Vec<<0> of test::std::vec::pop<_>(_)>
            ValueOfAssignable
              LocalVariable(this)
      Expr type: &<0> of test::std::vec::pop<_>(_)
      Assign(Assign)
        PointerFieldAccess(data, 1)
          Expr type: &test::std::vec::Vec<<0> of test::std::vec::pop<_>(_)>
          ValueOfAssignable
            LocalVariable(this)
        Expr type: &<0> of test::std::vec::pop<_>(_)
        ValueOfAssignable
          LocalVariable(new_data)
    }
  }
  Expr type: <0> of test::std::vec::pop<_>(_)
  ValueOfAssignable
    LocalVariable(value)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "print"] }, item_name: "print" }, body_index: 20, param_count: 1, generic_count: 0 }) }>(test::std::print::print(_))
  literal: &char
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  Declaration(i)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(NotEquals))
      Expr type: char
      ValueOfAssignable
        ArrayIndex
          Expr type: &char
          ValueOfAssignable
            LocalVariable(literal)
          Expr type: int
          ValueOfAssignable
            LocalVariable(i)
      Expr type: char
      Literal(Char(0))
    Expr type: unit
    Block (returns: false) {
      Expr type: int
      Increment(false)
        LocalVariable(i)
    }
  }
  Expr type: unit
  FunctionCall
    Function(builtin::::write(&char,int))
    Expr type: &char
    ValueOfAssignable
      LocalVariable(literal)
    Expr type: int
    ValueOfAssignable
      LocalVariable(i)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "mem"] }, item_name: "memset" }, body_index: 32, param_count: 3, generic_count: 1 }) }>(test::std::mem::memset<_>(_,_,_))
  size: int
  value: int
  pointer: &<0> of test::std::mem::memset<_>(_,_,_)
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(builtin::::memset(&unit,int,int))
    Expr type: &unit
    Unary(Cast)
      Expr type: &<0> of test::std::mem::memset<_>(_,_,_)
      ValueOfAssignable
        LocalVariable(pointer)
    Expr type: int
    ValueOfAssignable
      LocalVariable(value)
    Expr type: int
    Binary(Math(Mul))
      Expr type: int
      ValueOfAssignable
        LocalVariable(size)
      Expr type: int
      Sizeof(GenericType(GenericId { kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "mem"] }, item_name: "memset" }, body_index: 32, param_count: 3, generic_count: 1 }), index: 0 }))
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "string"] }, item_name: "concat" }, body_index: 40, param_count: 2, generic_count: 0 }) }>(test::std::string::concat(_,_))
  str2: &test::std::vec::Vec<char>
  str1: &test::std::vec::Vec<char>
-> test::std::vec::Vec<char>
Expr type: test::std::vec::Vec<char>
Block (returns: true) {
  Expr type: unit
  Declaration(str)
    Expr type: test::std::vec::Vec<char>
    FunctionCall
      Function(test::std::string::create_string(int))
      Expr type: int
      Binary(Math(Add))
        Expr type: int
        ValueOfAssignable
          PointerFieldAccess(size, 1)
            Expr type: &test::std::vec::Vec<char>
            ValueOfAssignable
              LocalVariable(str1)
        Expr type: int
        ValueOfAssignable
          PointerFieldAccess(size, 1)
            Expr type: &test::std::vec::Vec<char>
            ValueOfAssignable
              LocalVariable(str2)
  Expr type: unit
  Declaration(i)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        LocalVariable(i)
      Expr type: int
      ValueOfAssignable
        PointerFieldAccess(size, 1)
          Expr type: &test::std::vec::Vec<char>
          ValueOfAssignable
            LocalVariable(str1)
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      FunctionCall
        Function(test::std::vec::set<char>(&test::std::vec::Vec<char>,int,char))
        Expr type: &test::std::vec::Vec<char>
        Borrow
          LocalVariable(str)
        Expr type: int
        ValueOfAssignable
          LocalVariable(i)
        Expr type: char
        FunctionCall
          Function(test::std::vec::get<char>(&test::std::vec::Vec<char>,int))
          Expr type: &test::std::vec::Vec<char>
          ValueOfAssignable
            LocalVariable(str1)
          Expr type: int
          ValueOfAssignable
            LocalVariable(i)
      Expr type: int
      Increment(false)
        LocalVariable(i)
    }
  }
  Expr type: unit
  Declaration(j)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        LocalVariable(j)
      Expr type: int
      ValueOfAssignable
        PointerFieldAccess(size, 1)
          Expr type: &test::std::vec::Vec<char>
          ValueOfAssignable
            LocalVariable(str2)
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      FunctionCall
        Function(test::std::vec::set<char>(&test::std::vec::Vec<char>,int,char))
        Expr type: &test::std::vec::Vec<char>
        Borrow
          LocalVariable(str)
        Expr type: int
        ValueOfAssignable
          LocalVariable(i)
        Expr type: char
        FunctionCall
          Function(test::std::vec::get<char>(&test::std::vec::Vec<char>,int))
          Expr type: &test::std::vec::Vec<char>
          ValueOfAssignable
            LocalVariable(str2)
          Expr type: int
          ValueOfAssignable
            LocalVariable(j)
      Expr type: int
      Increment(false)
        LocalVariable(i)
      Expr type: int
      Increment(false)
        LocalVariable(j)
    }
  }
  Expr type: test::std::vec::Vec<char>
  ValueOfAssignable
    LocalVariable(str)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "call_test_fn" }, body_index: 7, param_count: 2, generic_count: 0 }) }>(test::::call_test_fn(_,_))
  fn: fn(int)->int
  val: int
-> int
Expr type: int
Block (returns: true) {
  Expr type: int
  FunctionCall
    Expr type: fn(int)->int
    ValueOfAssignable
      LocalVariable(fn)
    Expr type: int
    ValueOfAssignable
      LocalVariable(val)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "array"] }, item_name: "get" }, body_index: 57, param_count: 2, generic_count: 1 }) }>(test::std::array::get<_>(_,_))
  index: int
  this: test::std::array::Array<<0> of test::std::array::get<_>(_,_)>
-> <0> of test::std::array::get<_>(_,_)
Expr type: unit
Block (returns: false) {
  Expr type: unit
  Return {
    Expr type: <0> of test::std::array::get<_>(_,_)
    ValueOfAssignable
      ArrayIndex
        Expr type: &<0> of test::std::array::get<_>(_,_)
        FieldAccess(data)
          Expr type: test::std::array::Array<<0> of test::std::array::get<_>(_,_)>
          ValueOfAssignable
            LocalVariable(this)
        Expr type: int
        ValueOfAssignable
          LocalVariable(index)
  }
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "print"] }, item_name: "print" }, body_index: 26, param_count: 1, generic_count: 0 }) }>(test::std::print::print(_))
  num: int
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  If {
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        LocalVariable(num)
      Expr type: int
      Literal(Integer(0))
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      FunctionCall
        Function(builtin::::write_char(char))
        Expr type: char
        Literal(Char(45))
      Expr type: int
      Assign(Assign)
        LocalVariable(num)
        Expr type: int
        Unary(Math(Negate))
          Expr type: int
          ValueOfAssignable
            LocalVariable(num)
    }
  }
  Expr type: unit
  If {
    Expr type: bool
    Binary(Comparison(LessEquals))
      Expr type: int
      ValueOfAssignable
        LocalVariable(num)
      Expr type: int
      Literal(Integer(9))
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      FunctionCall
        Function(builtin::::write_char(char))
        Expr type: char
        Unary(Cast)
          Expr type: int
          Binary(Math(Add))
            Expr type: int
            Binary(Math(Mod))
              Expr type: int
              ValueOfAssignable
                LocalVariable(num)
              Expr type: int
              Literal(Integer(10))
            Expr type: int
            Unary(Cast)
              Expr type: char
              Literal(Char(48))
      Expr type: unit
      Return {
      }
    }
  }
  Expr type: unit
  Declaration(divisor)
    Expr type: int
    Literal(Integer(1))
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(GreaterEquals))
      Expr type: int
      Binary(Math(Div))
        Expr type: int
        ValueOfAssignable
          LocalVariable(num)
        Expr type: int
        ValueOfAssignable
          LocalVariable(divisor)
      Expr type: int
      Literal(Integer(10))
    Expr type: unit
    Block (returns: false) {
      Expr type: int
      Assign(MathAssign(Mul))
        LocalVariable(divisor)
        Expr type: int
        Literal(Integer(10))
    }
  }
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(Greater))
      Expr type: int
      ValueOfAssignable
        LocalVariable(divisor)
      Expr type: int
      Literal(Integer(0))
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      Declaration(digit)
        Expr type: int
        Binary(Math(Div))
          Expr type: int
          ValueOfAssignable
            LocalVariable(num)
          Expr type: int
          ValueOfAssignable
            LocalVariable(divisor)
      Expr type: unit
      FunctionCall
        Function(builtin::::write_char(char))
        Expr type: char
        Unary(Cast)
          Expr type: int
          Binary(Math(Add))
            Expr type: int
            ValueOfAssignable
              LocalVariable(digit)
            Expr type: int
            Unary(Cast)
              Expr type: char
              Literal(Char(48))
      Expr type: int
      Assign(MathAssign(Mod))
        LocalVariable(num)
        Expr type: int
        ValueOfAssignable
          LocalVariable(divisor)
      Expr type: int
      Assign(MathAssign(Div))
        LocalVariable(divisor)
        Expr type: int
        Literal(Integer(10))
    }
  }
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "io"] }, item_name: "read" }, body_index: 69, param_count: 2, generic_count: 0 }) }>(test::std::io::read(_,_))
  string: &test::std::vec::Vec<char>
  this: test::std::io::File
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: int
  FunctionCall
    Function(builtin::::fread(&char,int,int))
    Expr type: &char
    ValueOfAssignable
      PointerFieldAccess(data, 1)
        Expr type: &test::std::vec::Vec<char>
        ValueOfAssignable
          LocalVariable(string)
    Expr type: int
    ValueOfAssignable
      PointerFieldAccess(size, 1)
        Expr type: &test::std::vec::Vec<char>
        ValueOfAssignable
          LocalVariable(string)
    Expr type: int
    FieldAccess(file)
      Expr type: test::std::io::File
      ValueOfAssignable
        LocalVariable(this)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "string"] }, item_name: "from_literal" }, body_index: 38, param_count: 1, generic_count: 0 }) }>(test::std::string::from_literal(_))
  literal: &char
-> test::std::vec::Vec<char>
Expr type: test::std::vec::Vec<char>
Block (returns: true) {
  Expr type: unit
  Declaration(size)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(NotEquals))
      Expr type: char
      ValueOfAssignable
        ArrayIndex
          Expr type: &char
          ValueOfAssignable
            LocalVariable(literal)
          Expr type: int
          ValueOfAssignable
            LocalVariable(size)
      Expr type: char
      Literal(Char(0))
    Expr type: unit
    Block (returns: false) {
      Expr type: int
      Increment(false)
        LocalVariable(size)
    }
  }
  Expr type: unit
  Declaration(str)
    Expr type: test::std::vec::Vec<char>
    FunctionCall
      Function(test::std::string::create_string(int))
      Expr type: int
      ValueOfAssignable
        LocalVariable(size)
  Expr type: unit
  Declaration(i)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        LocalVariable(i)
      Expr type: int
      ValueOfAssignable
        LocalVariable(size)
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      FunctionCall
        Function(test::std::vec::set<char>(&test::std::vec::Vec<char>,int,char))
        Expr type: &test::std::vec::Vec<char>
        Borrow
          LocalVariable(str)
        Expr type: int
        ValueOfAssignable
          LocalVariable(i)
        Expr type: char
        ValueOfAssignable
          ArrayIndex
            Expr type: &char
            ValueOfAssignable
              LocalVariable(literal)
            Expr type: int
            ValueOfAssignable
              LocalVariable(i)
      Expr type: int
      Increment(false)
        LocalVariable(i)
    }
  }
  Expr type: test::std::vec::Vec<char>
  ValueOfAssignable
    LocalVariable(str)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "string"] }, item_name: "read_string" }, body_index: 41, param_count: 1, generic_count: 0 }) }>(test::std::string::read_string(_))
  str: &test::std::vec::Vec<char>
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(builtin::::read(&char,int))
    Expr type: &char
    ValueOfAssignable
      PointerFieldAccess(data, 1)
        Expr type: &test::std::vec::Vec<char>
        ValueOfAssignable
          LocalVariable(str)
    Expr type: int
    ValueOfAssignable
      PointerFieldAccess(size, 1)
        Expr type: &test::std::vec::Vec<char>
        ValueOfAssignable
          LocalVariable(str)
}
Function<GenericParams { mapping: {"T1": 0, "T2": 1}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["generic_test"] }, item_name: "createStruct" }, body_index: 11, param_count: 3, generic_count: 2 }) }>(test::generic_test::createStruct<_,_>(_,_,_))
  val2: <1> of test::generic_test::createStruct<_,_>(_,_,_)
  val3: int
  val: <0> of test::generic_test::createStruct<_,_>(_,_,_)
-> test::generic_test::MyStruct<<0> of test::generic_test::createStruct<_,_>(_,_,_),<1> of test::generic_test::createStruct<_,_>(_,_,_)>
Expr type: test::generic_test::MyStruct<<0> of test::generic_test::createStruct<_,_>(_,_,_),<1> of test::generic_test::createStruct<_,_>(_,_,_)>
Block (returns: true) {
  Expr type: unit
  Declaration(my_struct)
    Expr type: test::generic_test::MyStruct<<0> of test::generic_test::createStruct<_,_>(_,_,_),<1> of test::generic_test::createStruct<_,_>(_,_,_)>
    Struct
      value: 
      Expr type: <0> of test::generic_test::createStruct<_,_>(_,_,_)
      ValueOfAssignable
        LocalVariable(val)
      value2: 
      Expr type: test::generic_test::Option<<1> of test::generic_test::createStruct<_,_>(_,_,_)>
      Struct
        value: 
        Expr type: <1> of test::generic_test::createStruct<_,_>(_,_,_)
        ValueOfAssignable
          LocalVariable(val2)
      value3: 
      Expr type: int
      ValueOfAssignable
        LocalVariable(val3)
      value4: 
      Expr type: &<0> of test::generic_test::createStruct<_,_>(_,_,_)
      Borrow
        LocalVariable(val)
  Expr type: &<0> of test::generic_test::createStruct<_,_>(_,_,_)
  Assign(Assign)
    FieldAccess(value4)
      LocalVariable(my_struct)
    Expr type: &<0> of test::generic_test::createStruct<_,_>(_,_,_)
    Borrow
      FieldAccess(value)
        LocalVariable(my_struct)
  Expr type: test::generic_test::MyStruct<<0> of test::generic_test::createStruct<_,_>(_,_,_),<1> of test::generic_test::createStruct<_,_>(_,_,_)>
  ValueOfAssignable
    LocalVariable(my_struct)
}
Function<GenericParams { mapping: {"T": 0, "K": 1}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "array"] }, item_name: "map" }, body_index: 63, param_count: 2, generic_count: 2 }) }>(test::std::array::map<_,_>(_,_))
  this: test::std::array::Array<<0> of test::std::array::map<_,_>(_,_)>
  fn: fn(<0> of test::std::array::map<_,_>(_,_))-><1> of test::std::array::map<_,_>(_,_)
-> test::std::array::Array<<1> of test::std::array::map<_,_>(_,_)>
Expr type: test::std::array::Array<<1> of test::std::array::map<_,_>(_,_)>
Block (returns: true) {
  Expr type: unit
  Declaration(arr)
    Expr type: test::std::array::Array<<1> of test::std::array::map<_,_>(_,_)>
    FunctionCall
      Function(test::std::array::create_array<<1> of test::std::array::map<_,_>(_,_)>(int))
      Expr type: int
      FieldAccess(size)
        Expr type: test::std::array::Array<<0> of test::std::array::map<_,_>(_,_)>
        ValueOfAssignable
          LocalVariable(this)
  Expr type: unit
  Declaration(i)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        LocalVariable(i)
      Expr type: int
      FieldAccess(size)
        Expr type: test::std::array::Array<<0> of test::std::array::map<_,_>(_,_)>
        ValueOfAssignable
          LocalVariable(this)
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      FunctionCall
        Function(test::std::array::set<<1> of test::std::array::map<_,_>(_,_)>(test::std::array::Array<<1> of test::std::array::map<_,_>(_,_)>,int,<1> of test::std::array::map<_,_>(_,_)))
        Expr type: test::std::array::Array<<1> of test::std::array::map<_,_>(_,_)>
        ValueOfAssignable
          LocalVariable(arr)
        Expr type: int
        ValueOfAssignable
          LocalVariable(i)
        Expr type: <1> of test::std::array::map<_,_>(_,_)
        FunctionCall
          Expr type: fn(<0> of test::std::array::map<_,_>(_,_))-><1> of test::std::array::map<_,_>(_,_)
          ValueOfAssignable
            LocalVariable(fn)
          Expr type: <0> of test::std::array::map<_,_>(_,_)
          FunctionCall
            Function(test::std::array::get<<0> of test::std::array::map<_,_>(_,_)>(test::std::array::Array<<0> of test::std::array::map<_,_>(_,_)>,int))
            Expr type: test::std::array::Array<<0> of test::std::array::map<_,_>(_,_)>
            ValueOfAssignable
              LocalVariable(this)
            Expr type: int
            ValueOfAssignable
              LocalVariable(i)
      Expr type: int
      Increment(false)
        LocalVariable(i)
    }
  }
  Expr type: test::std::array::Array<<1> of test::std::array::map<_,_>(_,_)>
  ValueOfAssignable
    LocalVariable(arr)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "io"] }, item_name: "write_file" }, body_index: 71, param_count: 2, generic_count: 0 }) }>(test::std::io::write_file(_,_))
  string: &test::std::vec::Vec<char>
  this: test::std::io::File
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(builtin::::fwrite(&char,int,int))
    Expr type: &char
    ValueOfAssignable
      PointerFieldAccess(data, 1)
        Expr type: &test::std::vec::Vec<char>
        ValueOfAssignable
          LocalVariable(string)
    Expr type: int
    ValueOfAssignable
      PointerFieldAccess(size, 1)
        Expr type: &test::std::vec::Vec<char>
        ValueOfAssignable
          LocalVariable(string)
    Expr type: int
    FieldAccess(file)
      Expr type: test::std::io::File
      ValueOfAssignable
        LocalVariable(this)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "string"] }, item_name: "parse_int" }, body_index: 42, param_count: 1, generic_count: 0 }) }>(test::std::string::parse_int(_))
  str: &test::std::vec::Vec<char>
-> int
Expr type: int
Block (returns: true) {
  Expr type: unit
  Declaration(i)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  Declaration(num)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  Declaration(sign)
    Expr type: int
    Literal(Integer(1))
  Expr type: unit
  If {
    Expr type: bool
    Binary(Comparison(Equals))
      Expr type: char
      FunctionCall
        Function(test::std::vec::get<char>(&test::std::vec::Vec<char>,int))
        Expr type: &test::std::vec::Vec<char>
        ValueOfAssignable
          LocalVariable(str)
        Expr type: int
        Literal(Integer(0))
      Expr type: char
      Literal(Char(45))
    Expr type: unit
    Block (returns: false) {
      Expr type: int
      Assign(Assign)
        LocalVariable(sign)
        Expr type: int
        Literal(Integer(-1))
      Expr type: int
      Increment(false)
        LocalVariable(i)
    }
  }
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        LocalVariable(i)
      Expr type: int
      ValueOfAssignable
        PointerFieldAccess(size, 1)
          Expr type: &test::std::vec::Vec<char>
          ValueOfAssignable
            LocalVariable(str)
    Expr type: unit
    Block (returns: false) {
      Expr type: int
      Assign(Assign)
        LocalVariable(num)
        Expr type: int
        Binary(Math(Add))
          Expr type: int
          Binary(Math(Mul))
            Expr type: int
            ValueOfAssignable
              LocalVariable(num)
            Expr type: int
            Literal(Integer(10))
          Expr type: int
          Binary(Math(Sub))
            Expr type: int
            Unary(Cast)
              Expr type: char
              FunctionCall
                Function(test::std::vec::get<char>(&test::std::vec::Vec<char>,int))
                Expr type: &test::std::vec::Vec<char>
                ValueOfAssignable
                  LocalVariable(str)
                Expr type: int
                ValueOfAssignable
                  LocalVariable(i)
            Expr type: int
            Unary(Cast)
              Expr type: char
              Literal(Char(48))
      Expr type: int
      Increment(false)
        LocalVariable(i)
    }
  }
  Expr type: int
  Binary(Math(Mul))
    Expr type: int
    ValueOfAssignable
      LocalVariable(num)
    Expr type: int
    ValueOfAssignable
      LocalVariable(sign)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "panic"] }, item_name: "panic" }, body_index: 65, param_count: 1, generic_count: 0 }) }>(test::std::panic::panic(_))
  message: &char
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(&char))
    Expr type: &char
    ConstantPointer(String([80, 65, 78, 73, 67, 58, 0]))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(&char))
    Expr type: &char
    ValueOfAssignable
      LocalVariable(message)
  Expr type: unit
  FunctionCall
    Function(builtin::::exit(int))
    Expr type: int
    Literal(Integer(1))
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "print"] }, item_name: "println" }, body_index: 27, param_count: 1, generic_count: 0 }) }>(test::std::print::println(_))
  num: int
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(test::std::print::print(int))
    Expr type: int
    ValueOfAssignable
      LocalVariable(num)
  Expr type: unit
  FunctionCall
    Function(builtin::::write_char(char))
    Expr type: char
    Literal(Char(10))
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "print"] }, item_name: "println" }, body_index: 25, param_count: 1, generic_count: 0 }) }>(test::std::print::println(_))
  b: bool
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(test::std::print::print(bool))
    Expr type: bool
    ValueOfAssignable
      LocalVariable(b)
  Expr type: unit
  FunctionCall
    Function(builtin::::write_char(char))
    Expr type: char
    Literal(Char(10))
}
Function<GenericParams { mapping: {"T": 0, "K": 1}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "vec"] }, item_name: "map" }, body_index: 55, param_count: 2, generic_count: 2 }) }>(test::std::vec::map<_,_>(_,_))
  fn: fn(<0> of test::std::vec::map<_,_>(_,_))-><1> of test::std::vec::map<_,_>(_,_)
  this: test::std::vec::Vec<<0> of test::std::vec::map<_,_>(_,_)>
-> test::std::vec::Vec<<1> of test::std::vec::map<_,_>(_,_)>
Expr type: test::std::vec::Vec<<1> of test::std::vec::map<_,_>(_,_)>
Block (returns: true) {
  Expr type: unit
  Declaration(arr)
    Expr type: test::std::vec::Vec<<1> of test::std::vec::map<_,_>(_,_)>
    FunctionCall
      Function(test::std::vec::create_vec<<1> of test::std::vec::map<_,_>(_,_)>(int))
      Expr type: int
      FieldAccess(size)
        Expr type: test::std::vec::Vec<<0> of test::std::vec::map<_,_>(_,_)>
        ValueOfAssignable
          LocalVariable(this)
  Expr type: unit
  Declaration(i)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        LocalVariable(i)
      Expr type: int
      FieldAccess(size)
        Expr type: test::std::vec::Vec<<0> of test::std::vec::map<_,_>(_,_)>
        ValueOfAssignable
          LocalVariable(this)
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      FunctionCall
        Function(test::std::vec::push<<1> of test::std::vec::map<_,_>(_,_)>(&test::std::vec::Vec<<1> of test::std::vec::map<_,_>(_,_)>,<1> of test::std::vec::map<_,_>(_,_)))
        Expr type: &test::std::vec::Vec<<1> of test::std::vec::map<_,_>(_,_)>
        Borrow
          LocalVariable(arr)
        Expr type: <1> of test::std::vec::map<_,_>(_,_)
        FunctionCall
          Expr type: fn(<0> of test::std::vec::map<_,_>(_,_))-><1> of test::std::vec::map<_,_>(_,_)
          ValueOfAssignable
            LocalVariable(fn)
          Expr type: <0> of test::std::vec::map<_,_>(_,_)
          FunctionCall
            Function(test::std::vec::get<<0> of test::std::vec::map<_,_>(_,_)>(test::std::vec::Vec<<0> of test::std::vec::map<_,_>(_,_)>,int))
            Expr type: test::std::vec::Vec<<0> of test::std::vec::map<_,_>(_,_)>
            ValueOfAssignable
              LocalVariable(this)
            Expr type: int
            ValueOfAssignable
              LocalVariable(i)
      Expr type: int
      Increment(false)
        LocalVariable(i)
    }
  }
  Expr type: test::std::vec::Vec<<1> of test::std::vec::map<_,_>(_,_)>
  ValueOfAssignable
    LocalVariable(arr)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "tuple_test" }, body_index: 9, param_count: 2, generic_count: 1 }) }>(test::::tuple_test<_>(_,_))
  a: <0> of test::::tuple_test<_>(_,_)
  b: int
-> builtin::::$tuple<<0> of test::::tuple_test<_>(_,_),int>
Expr type: builtin::::$tuple<<0> of test::::tuple_test<_>(_,_),int>
Block (returns: true) {
  Expr type: builtin::::$tuple<<0> of test::::tuple_test<_>(_,_),int>
  Struct
    item0: 
    Expr type: <0> of test::::tuple_test<_>(_,_)
    ValueOfAssignable
      LocalVariable(a)
    item1: 
    Expr type: int
    ValueOfAssignable
      LocalVariable(b)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "print"] }, item_name: "print" }, body_index: 22, param_count: 1, generic_count: 0 }) }>(test::std::print::print(_))
  c: char
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(builtin::::write_char(char))
    Expr type: char
    ValueOfAssignable
      LocalVariable(c)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "array"] }, item_name: "print" }, body_index: 60, param_count: 1, generic_count: 0 }) }>(test::std::array::print(_))
  this: test::std::array::Array<int>
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  Declaration(i)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  FunctionCall
    Function(builtin::::write_char(char))
    Expr type: char
    Literal(Char(91))
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        LocalVariable(i)
      Expr type: int
      FieldAccess(size)
        Expr type: test::std::array::Array<int>
        ValueOfAssignable
          LocalVariable(this)
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      If {
        Expr type: bool
        Binary(Comparison(Greater))
          Expr type: int
          ValueOfAssignable
            LocalVariable(i)
          Expr type: int
          Literal(Integer(0))
        Expr type: unit
        Block (returns: false) {
          Expr type: unit
          FunctionCall
            Function(builtin::::write_char(char))
            Expr type: char
            Literal(Char(44))
          Expr type: unit
          FunctionCall
            Function(builtin::::write_char(char))
            Expr type: char
            Literal(Char(32))
        }
      }
      Expr type: unit
      FunctionCall
        Function(test::std::print::print(int))
        Expr type: int
        ValueOfAssignable
          ArrayIndex
            Expr type: &int
            FieldAccess(data)
              Expr type: test::std::array::Array<int>
              ValueOfAssignable
                LocalVariable(this)
            Expr type: int
            ValueOfAssignable
              LocalVariable(i)
      Expr type: int
      Increment(false)
        LocalVariable(i)
    }
  }
  Expr type: unit
  FunctionCall
    Function(builtin::::write_char(char))
    Expr type: char
    Literal(Char(93))
  Expr type: unit
  FunctionCall
    Function(builtin::::write_char(char))
    Expr type: char
    Literal(Char(10))
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "array"] }, item_name: "create_array" }, body_index: 61, param_count: 1, generic_count: 1 }) }>(test::std::array::create_array<_>(_))
  size: int
-> test::std::array::Array<<0> of test::std::array::create_array<_>(_)>
Expr type: test::std::array::Array<<0> of test::std::array::create_array<_>(_)>
Block (returns: true) {
  Expr type: unit
  Declaration(arr)
    Expr type: test::std::array::Array<<0> of test::std::array::create_array<_>(_)>
    Struct
      data: 
      Expr type: &<0> of test::std::array::create_array<_>(_)
      FunctionCall
        Function(test::std::mem::malloc<<0> of test::std::array::create_array<_>(_)>(int))
        Expr type: int
        ValueOfAssignable
          LocalVariable(size)
      size: 
      Expr type: int
      ValueOfAssignable
        LocalVariable(size)
  Expr type: unit
  FunctionCall
    Function(test::std::mem::memset<<0> of test::std::array::create_array<_>(_)>(&<0> of test::std::array::create_array<_>(_),int,int))
    Expr type: &<0> of test::std::array::create_array<_>(_)
    FieldAccess(data)
      Expr type: test::std::array::Array<<0> of test::std::array::create_array<_>(_)>
      ValueOfAssignable
        LocalVariable(arr)
    Expr type: int
    Literal(Integer(0))
    Expr type: int
    ValueOfAssignable
      LocalVariable(size)
  Expr type: test::std::array::Array<<0> of test::std::array::create_array<_>(_)>
  ValueOfAssignable
    LocalVariable(arr)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "io"] }, item_name: "file_test" }, body_index: 66, param_count: 0, generic_count: 0 }) }>(test::std::io::file_test())
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  Declaration(in_file)
    Expr type: test::std::io::File
    FunctionCall
      Function(test::std::io::open_file(&char))
      Expr type: &char
      ConstantPointer(String([100, 97, 116, 97, 47, 105, 110, 112, 117, 116, 46, 116, 120, 116, 0]))
  Expr type: unit
  Declaration(out_file)
    Expr type: test::std::io::File
    FunctionCall
      Function(test::std::io::open_file(&char))
      Expr type: &char
      ConstantPointer(String([100, 97, 116, 97, 47, 111, 117, 116, 112, 117, 116, 46, 116, 120, 116, 0]))
  Expr type: unit
  FunctionCall
    Function(builtin::::write_char(char))
    Expr type: char
    Literal(Char(10))
  Expr type: unit
  Declaration(str)
    Expr type: test::std::vec::Vec<char>
    FunctionCall
      Function(test::std::io::read_chars(test::std::io::File,int))
      Expr type: test::std::io::File
      ValueOfAssignable
        LocalVariable(in_file)
      Expr type: int
      Literal(Integer(100))
  Expr type: unit
  FunctionCall
    Function(test::std::string::print(test::std::vec::Vec<char>))
    Expr type: test::std::vec::Vec<char>
    ValueOfAssignable
      LocalVariable(str)
  Expr type: unit
  FunctionCall
    Function(test::std::io::write_file(test::std::io::File,&test::std::vec::Vec<char>))
    Expr type: test::std::io::File
    ValueOfAssignable
      LocalVariable(out_file)
    Expr type: &test::std::vec::Vec<char>
    Borrow
      LocalVariable(str)
  Expr type: unit
  FunctionCall
    Function(test::std::io::close(test::std::io::File))
    Expr type: test::std::io::File
    ValueOfAssignable
      LocalVariable(in_file)
  Expr type: unit
  FunctionCall
    Function(test::std::io::close(test::std::io::File))
    Expr type: test::std::io::File
    ValueOfAssignable
      LocalVariable(out_file)
  Expr type: unit
  FunctionCall
    Function(test::std::io::print_file(test::std::io::File))
    Expr type: test::std::io::File
    ValueOfAssignable
      LocalVariable(in_file)
  Expr type: unit
  FunctionCall
    Function(test::std::io::print_file(test::std::io::File))
    Expr type: test::std::io::File
    ValueOfAssignable
      LocalVariable(out_file)
  Expr type: unit
  FunctionCall
    Function(test::std::string::free(test::std::vec::Vec<char>))
    Expr type: test::std::vec::Vec<char>
    ValueOfAssignable
      LocalVariable(str)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "vec"] }, item_name: "fill" }, body_index: 47, param_count: 2, generic_count: 1 }) }>(test::std::vec::fill<_>(_,_))
  this: test::std::vec::Vec<<0> of test::std::vec::fill<_>(_,_)>
  value: <0> of test::std::vec::fill<_>(_,_)
-> unit
Expr type: unit
Block (returns: true) {
  Expr type: unit
  Declaration(i)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        LocalVariable(i)
      Expr type: int
      FieldAccess(size)
        Expr type: test::std::vec::Vec<<0> of test::std::vec::fill<_>(_,_)>
        ValueOfAssignable
          LocalVariable(this)
    Expr type: unit
    Block (returns: false) {
      Expr type: <0> of test::std::vec::fill<_>(_,_)
      Assign(Assign)
        ArrayIndex
          Expr type: &<0> of test::std::vec::fill<_>(_,_)
          FieldAccess(data)
            Expr type: test::std::vec::Vec<<0> of test::std::vec::fill<_>(_,_)>
            ValueOfAssignable
              LocalVariable(this)
          Expr type: int
          ValueOfAssignable
            LocalVariable(i)
        Expr type: <0> of test::std::vec::fill<_>(_,_)
        ValueOfAssignable
          LocalVariable(value)
      Expr type: int
      Increment(false)
        LocalVariable(i)
    }
  }
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "vec"] }, item_name: "free" }, body_index: 51, param_count: 1, generic_count: 1 }) }>(test::std::vec::free<_>(_))
  this: test::std::vec::Vec<<0> of test::std::vec::free<_>(_)>
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(test::std::mem::free<<0> of test::std::vec::free<_>(_)>(&<0> of test::std::vec::free<_>(_)))
    Expr type: &<0> of test::std::vec::free<_>(_)
    FieldAccess(data)
      Expr type: test::std::vec::Vec<<0> of test::std::vec::free<_>(_)>
      ValueOfAssignable
        LocalVariable(this)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "my_println" }, body_index: 1, param_count: 1, generic_count: 0 }) }>(test::::my_println(_))
  a: int
-> unit
Expr type: unit
Block (returns: true) {
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    ValueOfAssignable
      LocalVariable(a)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["generic_test"] }, item_name: "nested_generic_function" }, body_index: 15, param_count: 1, generic_count: 1 }) }>(test::generic_test::nested_generic_function<_>(_))
  x: <0> of test::generic_test::nested_generic_function<_>(_)
-> <0> of test::generic_test::nested_generic_function<_>(_)
Expr type: <0> of test::generic_test::nested_generic_function<_>(_)
Block (returns: true) {
  Expr type: int
  FunctionCall
    Function(test::generic_test::generic_function<int>(int))
    Expr type: int
    Literal(Integer(5))
  Expr type: <0> of test::generic_test::nested_generic_function<_>(_)
  FunctionCall
    Function(test::generic_test::generic_function<<0> of test::generic_test::nested_generic_function<_>(_)>(<0> of test::generic_test::nested_generic_function<_>(_)))
    Expr type: <0> of test::generic_test::nested_generic_function<_>(_)
    ValueOfAssignable
      LocalVariable(x)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "main" }, body_index: 0, param_count: 0, generic_count: 0 }) }>(test::::main())
-> int
Expr type: int
Block (returns: true) {
  Expr type: unit
  Declaration(arr)
    Expr type: test::std::array::Array<int>
    FunctionCall
      Function(test::std::array::create_array<int>(int))
      Expr type: int
      Literal(Integer(100))
  Expr type: unit
  FunctionCall
    Function(test::std::array::fill<int>(test::std::array::Array<int>,int))
    Expr type: test::std::array::Array<int>
    ValueOfAssignable
      LocalVariable(arr)
    Expr type: int
    Literal(Integer(10))
  Expr type: unit
  FunctionCall
    Function(test::std::array::set<int>(test::std::array::Array<int>,int,int))
    Expr type: test::std::array::Array<int>
    ValueOfAssignable
      LocalVariable(arr)
    Expr type: int
    Literal(Integer(8))
    Expr type: int
    FunctionCall
      Function(test::::generic_sizeof_test<test::generic_test::MyStruct<char,long>,int>())
  Expr type: unit
  Loop {
    Expr type: unit
    Declaration(i)
      Expr type: int
      Literal(Integer(0))
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        LocalVariable(i)
      Expr type: int
      Literal(Integer(5))
    Expr type: int
    Increment(false)
      LocalVariable(i)
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      FunctionCall
        Function(test::std::array::set<int>(test::std::array::Array<int>,int,int))
        Expr type: test::std::array::Array<int>
        ValueOfAssignable
          LocalVariable(arr)
        Expr type: int
        ValueOfAssignable
          LocalVariable(i)
        Expr type: int
        ValueOfAssignable
          LocalVariable(i)
      Expr type: unit
      FunctionCall
        Function(test::::unit_test(unit,unit))
        Expr type: unit
        Continue
        Expr type: unit
        Break {
        }
      Expr type: unit
      FunctionCall
        Function(test::std::array::set<int>(test::std::array::Array<int>,int,int))
        Expr type: test::std::array::Array<int>
        ValueOfAssignable
          LocalVariable(arr)
        Expr type: int
        ValueOfAssignable
          LocalVariable(i)
        Expr type: int
        Binary(Math(Add))
          Expr type: int
          ValueOfAssignable
            LocalVariable(i)
          Expr type: int
          Literal(Integer(50))
    }
  }
  Expr type: unit
  FunctionCall
    Function(test::std::array::print(test::std::array::Array<int>))
    Expr type: test::std::array::Array<int>
    ValueOfAssignable
      LocalVariable(arr)
  Expr type: unit
  Declaration(my_struct)
    Expr type: test::generic_test::MyStruct<int,int>
    FunctionCall
      Function(test::generic_test::createStruct<int,int>(int,int,int))
      Expr type: int
      Literal(Integer(10))
      Expr type: int
      Literal(Integer(20))
      Expr type: int
      Literal(Integer(30))
  Expr type: unit
  FunctionCall
    Function(test::std::io::file_test())
  Expr type: int
  FunctionCall
    Function(test::::generic_sizeof_test<int>())
  Expr type: unit
  Declaration(test_enum)
    Expr type: test::::TestEnum
    Literal(Integer(0))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    Unary(Cast)
      Expr type: test::::TestEnum
      Literal(Integer(1))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(bool))
    Expr type: bool
    Binary(Comparison(Equals))
      Expr type: test::::TestEnum
      Literal(Integer(1))
      Expr type: test::::TestEnum
      Literal(Integer(1))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(&char))
    Expr type: &char
    ConstantPointer(String([104, 105, 0]))
  Expr type: unit
  FunctionCall
    Function(test::std::print::print(int))
    Expr type: int
    Unary(Cast)
      Expr type: test::::TestEnum
      Literal(Integer(-240))
  Expr type: unit
  FunctionCall
    Function(test::enum_test::enum_test())
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(&char))
    Expr type: &char
    ConstantPointer(String([69, 78, 68, 32, 84, 69, 83, 84, 0]))
  Expr type: unit
  Declaration(test_fn)
    Expr type: fn(int)->int
    FunctionPointer(test::::mul2(int))
  Expr type: unit
  Declaration(a)
    Expr type: int
    FunctionCall
      Expr type: fn(int)->int
      ValueOfAssignable
        LocalVariable(test_fn)
      Expr type: int
      Literal(Integer(10))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    ValueOfAssignable
      LocalVariable(a)
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    FunctionCall
      Expr type: fn(int)->int
      ValueOfAssignable
        LocalVariable(test_fn)
      Expr type: int
      Literal(Integer(10))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    FunctionCall
      Function(test::::call_test_fn(fn(int)->int,int))
      Expr type: fn(int)->int
      ValueOfAssignable
        LocalVariable(test_fn)
      Expr type: int
      Literal(Integer(10))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(&char))
    Expr type: &char
    ConstantPointer(String([69, 78, 68, 32, 84, 69, 83, 84, 32, 50, 0]))
  Expr type: unit
  Declaration(test_fn2)
    Expr type: fn(fn(int)->int,int)->int
    FunctionPointer(test::::generic_call_test<int>(fn(int)->int,int))
  Expr type: unit
  Declaration(b)
    Expr type: int
    FunctionCall
      Expr type: fn(fn(int)->int,int)->int
      ValueOfAssignable
        LocalVariable(test_fn2)
      Expr type: fn(int)->int
      ValueOfAssignable
        LocalVariable(test_fn)
      Expr type: int
      Literal(Integer(12))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    ValueOfAssignable
      LocalVariable(b)
  Expr type: unit
  Declaration(arr2)
    Expr type: test::std::array::Array<int>
    FunctionCall
      Function(test::std::array::map<int,int>(test::std::array::Array<int>,fn(int)->int))
      Expr type: test::std::array::Array<int>
      ValueOfAssignable
        LocalVariable(arr)
      Expr type: fn(int)->int
      ValueOfAssignable
        LocalVariable(test_fn)
  Expr type: unit
  FunctionCall
    Function(test::std::array::print(test::std::array::Array<int>))
    Expr type: test::std::array::Array<int>
    ValueOfAssignable
      LocalVariable(arr2)
  Expr type: unit
  Declaration(vec)
    Expr type: test::std::vec::Vec<int>
    FunctionCall
      Function(test::std::vec::create_vec<int>(int))
      Expr type: int
      Literal(Integer(1))
  Expr type: unit
  FunctionCall
    Function(test::std::vec::push<int>(&test::std::vec::Vec<int>,int))
    Expr type: &test::std::vec::Vec<int>
    Borrow
      LocalVariable(vec)
    Expr type: int
    Literal(Integer(10))
  Expr type: unit
  FunctionCall
    Function(test::std::vec::push<int>(&test::std::vec::Vec<int>,int))
    Expr type: &test::std::vec::Vec<int>
    Borrow
      LocalVariable(vec)
    Expr type: int
    Literal(Integer(20))
  Expr type: unit
  FunctionCall
    Function(test::std::vec::print(test::std::vec::Vec<int>))
    Expr type: test::std::vec::Vec<int>
    ValueOfAssignable
      LocalVariable(vec)
  Expr type: unit
  FunctionCall
    Function(test::std::vec::push<int>(&test::std::vec::Vec<int>,int))
    Expr type: &test::std::vec::Vec<int>
    Borrow
      LocalVariable(vec)
    Expr type: int
    Literal(Integer(30))
  Expr type: unit
  Declaration(cloned_vec)
    Expr type: test::std::vec::Vec<int>
    FunctionCall
      Function(test::std::vec::clone<int>(test::std::vec::Vec<int>))
      Expr type: test::std::vec::Vec<int>
      ValueOfAssignable
        LocalVariable(vec)
  Expr type: unit
  FunctionCall
    Function(test::std::vec::print(test::std::vec::Vec<int>))
    Expr type: test::std::vec::Vec<int>
    ValueOfAssignable
      LocalVariable(cloned_vec)
  Expr type: unit
  FunctionCall
    Function(test::std::vec::print(test::std::vec::Vec<int>))
    Expr type: test::std::vec::Vec<int>
    ValueOfAssignable
      LocalVariable(vec)
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    FieldAccess(capacity)
      Expr type: test::std::vec::Vec<int>
      ValueOfAssignable
        LocalVariable(vec)
  Expr type: unit
  FunctionCall
    Function(test::std::vec::push<int>(&test::std::vec::Vec<int>,int))
    Expr type: &test::std::vec::Vec<int>
    Borrow
      LocalVariable(vec)
    Expr type: int
    Literal(Integer(40))
  Expr type: unit
  FunctionCall
    Function(test::std::vec::push<int>(&test::std::vec::Vec<int>,int))
    Expr type: &test::std::vec::Vec<int>
    Borrow
      LocalVariable(vec)
    Expr type: int
    Literal(Integer(50))
  Expr type: unit
  FunctionCall
    Function(test::std::vec::print(test::std::vec::Vec<int>))
    Expr type: test::std::vec::Vec<int>
    ValueOfAssignable
      LocalVariable(vec)
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    FieldAccess(capacity)
      Expr type: test::std::vec::Vec<int>
      ValueOfAssignable
        LocalVariable(vec)
  Expr type: unit
  Declaration(vec2)
    Expr type: test::std::vec::Vec<int>
    FunctionCall
      Function(test::std::vec::map<int,int>(test::std::vec::Vec<int>,fn(int)->int))
      Expr type: test::std::vec::Vec<int>
      ValueOfAssignable
        LocalVariable(vec)
      Expr type: fn(int)->int
      FunctionPointer(test::::mul2(int))
  Expr type: unit
  FunctionCall
    Function(test::std::vec::print(test::std::vec::Vec<int>))
    Expr type: test::std::vec::Vec<int>
    ValueOfAssignable
      LocalVariable(vec2)
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    FunctionCall
      Function(test::std::vec::pop<int>(&test::std::vec::Vec<int>))
      Expr type: &test::std::vec::Vec<int>
      Borrow
        LocalVariable(vec)
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    FunctionCall
      Function(test::std::vec::pop<int>(&test::std::vec::Vec<int>))
      Expr type: &test::std::vec::Vec<int>
      Borrow
        LocalVariable(vec)
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    FunctionCall
      Function(test::std::vec::pop<int>(&test::std::vec::Vec<int>))
      Expr type: &test::std::vec::Vec<int>
      Borrow
        LocalVariable(vec)
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    FunctionCall
      Function(test::std::vec::pop<int>(&test::std::vec::Vec<int>))
      Expr type: &test::std::vec::Vec<int>
      Borrow
        LocalVariable(vec)
  Expr type: unit
  FunctionCall
    Function(test::std::vec::print(test::std::vec::Vec<int>))
    Expr type: test::std::vec::Vec<int>
    ValueOfAssignable
      LocalVariable(vec)
  Expr type: unit
  Declaration(printer)
    Expr type: fn(int)->unit
    FunctionPointer(test::std::print::println(int))
  Expr type: unit
  FunctionCall
    Function(test::std::vec::foreach<int>(test::std::vec::Vec<int>,fn(int)->unit))
    Expr type: test::std::vec::Vec<int>
    ValueOfAssignable
      LocalVariable(vec2)
    Expr type: fn(int)->unit
    ValueOfAssignable
      LocalVariable(printer)
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(&char))
    Expr type: &char
    ConstantPointer(String([84, 85, 80, 76, 69, 32, 84, 69, 83, 84, 0]))
  Expr type: unit
  Declaration(tuple)
    Expr type: builtin::::$tuple<int,int>
    Struct
      item0: 
      Expr type: int
      Literal(Integer(-11))
      item1: 
      Expr type: int
      Literal(Integer(-22))
  Expr type: unit
  Declaration(tuple2)
    Expr type: builtin::::$tuple<char,int>
    FunctionCall
      Function(test::::tuple_test<char>(char,int))
      Expr type: char
      Literal(Char(99))
      Expr type: int
      Literal(Integer(10))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    FieldAccess(item2)
      Expr type: builtin::::$tuple<int,int>
      ValueOfAssignable
        LocalVariable(tuple)
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(char))
    Expr type: char
    FieldAccess(item1)
      Expr type: builtin::::$tuple<char,int>
      ValueOfAssignable
        LocalVariable(tuple2)
  Expr type: unit
  Declaration(tuple_2d)
    Expr type: builtin::::$tuple<builtin::::$tuple<int,int>,builtin::::$tuple<int,int>>
    Struct
      item0: 
      Expr type: builtin::::$tuple<int,int>
      ValueOfAssignable
        LocalVariable(tuple)
      item1: 
      Expr type: builtin::::$tuple<int,int>
      ValueOfAssignable
        LocalVariable(tuple)
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    Sizeof(StructType(StructRef { id: StructId { id: ItemId { module_id: ModuleIdentifier { root_name: "builtin", path: [] }, item_name: "$tuple" }, generic_count: 9 }, generic_args: [StructType(StructRef { id: StructId { id: ItemId { module_id: ModuleIdentifier { root_name: "builtin", path: [] }, item_name: "$tuple" }, generic_count: 3 }, generic_args: [Integer(4), Integer(4), Integer(4)] }), StructType(StructRef { id: StructId { id: ItemId { module_id: ModuleIdentifier { root_name: "builtin", path: [] }, item_name: "$tuple" }, generic_count: 3 }, generic_args: [Integer(4), Integer(4), Integer(4)] }), Integer(8), Integer(4), Integer(8), Integer(4), Integer(8), Integer(8), Integer(8)] }))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    FieldAccess(item2)
      Expr type: builtin::::$tuple<int,int>
      FieldAccess(item1)
        Expr type: builtin::::$tuple<builtin::::$tuple<int,int>,builtin::::$tuple<int,int>>
        ValueOfAssignable
          LocalVariable(tuple_2d)
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    Sizeof(StructType(StructRef { id: StructId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "A" }, generic_count: 1 }, generic_args: [StructType(StructRef { id: StructId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "A" }, generic_count: 1 }, generic_args: [StructType(StructRef { id: StructId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "A" }, generic_count: 1 }, generic_args: [StructType(StructRef { id: StructId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "A" }, generic_count: 1 }, generic_args: [StructType(StructRef { id: StructId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "A" }, generic_count: 1 }, generic_args: [StructType(StructRef { id: StructId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "A" }, generic_count: 1 }, generic_args: [Integer(4)] })] })] })] })] })] }))
  Expr type: unit
  Declaration(A)
    Expr type: test::::A<test::::A<int>>
    Struct
      a: 
      Expr type: test::::A<int>
      Struct
        a: 
        Expr type: int
        Literal(Integer(10))
        b: 
        Expr type: int
        Literal(Integer(20))
      b: 
      Expr type: test::::A<int>
      Struct
        a: 
        Expr type: int
        Literal(Integer(30))
        b: 
        Expr type: int
        Literal(Integer(40))
  Expr type: unit
  Declaration(dir)
    Expr type: test::enum_test::Direction
    Literal(Integer(1))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    Unary(Cast)
      Expr type: test::enum_test::Direction
      ValueOfAssignable
        LocalVariable(dir)
  Expr type: unit
  Declaration(extern_test)
    Expr type: int
    FunctionCall
      Function(small_test::::add(int,int))
      Expr type: int
      FunctionCall
        Function(small_test::::add(int,int))
        Expr type: int
        Literal(Integer(10))
        Expr type: int
        Literal(Integer(20))
      Expr type: int
      Literal(Integer(20))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    ValueOfAssignable
      LocalVariable(extern_test)
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(&char))
    Expr type: &char
    ConstantPointer(String([77, 69, 77, 32, 84, 69, 83, 84, 0]))
  Expr type: unit
  Declaration(vec3)
    Expr type: test::std::vec::Vec<int>
    FunctionCall
      Function(test::std::vec::create_sized_vec<int>(int))
      Expr type: int
      Literal(Integer(5))
  Expr type: unit
  FunctionCall
    Function(test::std::vec::print(test::std::vec::Vec<int>))
    Expr type: test::std::vec::Vec<int>
    ValueOfAssignable
      LocalVariable(vec3)
  Expr type: unit
  FunctionCall
    Function(test::std::vec::free<int>(test::std::vec::Vec<int>))
    Expr type: test::std::vec::Vec<int>
    ValueOfAssignable
      LocalVariable(vec3)
  Expr type: unit
  Declaration(big_vec)
    Expr type: test::std::vec::Vec<int>
    FunctionCall
      Function(test::std::vec::create_sized_vec<int>(int))
      Expr type: int
      Literal(Integer(100000))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    FieldAccess(size)
      Expr type: test::std::vec::Vec<int>
      ValueOfAssignable
        LocalVariable(big_vec)
  Expr type: unit
  FunctionCall
    Function(test::std::vec::free<int>(test::std::vec::Vec<int>))
    Expr type: test::std::vec::Vec<int>
    ValueOfAssignable
      LocalVariable(big_vec)
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(&char))
    Expr type: &char
    ConstantPointer(String([80, 65, 78, 73, 67, 32, 84, 69, 83, 84, 0]))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    FunctionCall
      Function(test::std::vec::pop<int>(&test::std::vec::Vec<int>))
      Expr type: &test::std::vec::Vec<int>
      Borrow
        LocalVariable(vec)
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    FunctionCall
      Function(test::std::vec::pop<int>(&test::std::vec::Vec<int>))
      Expr type: &test::std::vec::Vec<int>
      Borrow
        LocalVariable(vec)
  Expr type: int
  Binary(Math(Add))
    Expr type: int
    FunctionCall
      Function(test::generic_test::test())
    Expr type: int
    FunctionCall
      Function(test::std::array::get<int>(test::std::array::Array<int>,int))
      Expr type: test::std::array::Array<int>
      ValueOfAssignable
        LocalVariable(arr)
      Expr type: int
      Literal(Integer(9))
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "vec"] }, item_name: "push" }, body_index: 52, param_count: 2, generic_count: 1 }) }>(test::std::vec::push<_>(_,_))
  this: &test::std::vec::Vec<<0> of test::std::vec::push<_>(_,_)>
  value: <0> of test::std::vec::push<_>(_,_)
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  If {
    Expr type: bool
    Binary(Comparison(Equals))
      Expr type: int
      ValueOfAssignable
        PointerFieldAccess(size, 1)
          Expr type: &test::std::vec::Vec<<0> of test::std::vec::push<_>(_,_)>
          ValueOfAssignable
            LocalVariable(this)
      Expr type: int
      ValueOfAssignable
        PointerFieldAccess(capacity, 1)
          Expr type: &test::std::vec::Vec<<0> of test::std::vec::push<_>(_,_)>
          ValueOfAssignable
            LocalVariable(this)
    Expr type: unit
    Block (returns: false) {
      Expr type: int
      Assign(MathAssign(Mul))
        PointerFieldAccess(capacity, 1)
          Expr type: &test::std::vec::Vec<<0> of test::std::vec::push<_>(_,_)>
          ValueOfAssignable
            LocalVariable(this)
        Expr type: int
        Literal(Integer(2))
      Expr type: unit
      Declaration(new_data)
        Expr type: &<0> of test::std::vec::push<_>(_,_)
        FunctionCall
          Function(test::std::mem::realloc<<0> of test::std::vec::push<_>(_,_)>(&<0> of test::std::vec::push<_>(_,_),int))
          Expr type: &<0> of test::std::vec::push<_>(_,_)
          ValueOfAssignable
            PointerFieldAccess(data, 1)
              Expr type: &test::std::vec::Vec<<0> of test::std::vec::push<_>(_,_)>
              ValueOfAssignable
                LocalVariable(this)
          Expr type: int
          ValueOfAssignable
            PointerFieldAccess(capacity, 1)
              Expr type: &test::std::vec::Vec<<0> of test::std::vec::push<_>(_,_)>
              ValueOfAssignable
                LocalVariable(this)
      Expr type: unit
      FunctionCall
        Function(test::std::mem::memcopy<<0> of test::std::vec::push<_>(_,_)>(&<0> of test::std::vec::push<_>(_,_),&<0> of test::std::vec::push<_>(_,_),int))
        Expr type: &<0> of test::std::vec::push<_>(_,_)
        ValueOfAssignable
          PointerFieldAccess(data, 1)
            Expr type: &test::std::vec::Vec<<0> of test::std::vec::push<_>(_,_)>
            ValueOfAssignable
              LocalVariable(this)
        Expr type: &<0> of test::std::vec::push<_>(_,_)
        ValueOfAssignable
          LocalVariable(new_data)
        Expr type: int
        ValueOfAssignable
          PointerFieldAccess(size, 1)
            Expr type: &test::std::vec::Vec<<0> of test::std::vec::push<_>(_,_)>
            ValueOfAssignable
              LocalVariable(this)
      Expr type: &<0> of test::std::vec::push<_>(_,_)
      Assign(Assign)
        PointerFieldAccess(data, 1)
          Expr type: &test::std::vec::Vec<<0> of test::std::vec::push<_>(_,_)>
          ValueOfAssignable
            LocalVariable(this)
        Expr type: &<0> of test::std::vec::push<_>(_,_)
        ValueOfAssignable
          LocalVariable(new_data)
    }
  }
  Expr type: <0> of test::std::vec::push<_>(_,_)
  Assign(Assign)
    ArrayIndex
      Expr type: &<0> of test::std::vec::push<_>(_,_)
      ValueOfAssignable
        PointerFieldAccess(data, 1)
          Expr type: &test::std::vec::Vec<<0> of test::std::vec::push<_>(_,_)>
          ValueOfAssignable
            LocalVariable(this)
      Expr type: int
      ValueOfAssignable
        PointerFieldAccess(size, 1)
          Expr type: &test::std::vec::Vec<<0> of test::std::vec::push<_>(_,_)>
          ValueOfAssignable
            LocalVariable(this)
    Expr type: <0> of test::std::vec::push<_>(_,_)
    ValueOfAssignable
      LocalVariable(value)
  Expr type: int
  Increment(false)
    PointerFieldAccess(size, 1)
      Expr type: &test::std::vec::Vec<<0> of test::std::vec::push<_>(_,_)>
      ValueOfAssignable
        LocalVariable(this)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "print"] }, item_name: "print" }, body_index: 24, param_count: 1, generic_count: 0 }) }>(test::std::print::print(_))
  b: bool
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  If {
    Expr type: bool
    ValueOfAssignable
      LocalVariable(b)
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      FunctionCall
        Function(test::std::print::print(&char))
        Expr type: &char
        ConstantPointer(String([116, 114, 117, 101, 0]))
    }
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      FunctionCall
        Function(test::std::print::print(&char))
        Expr type: &char
        ConstantPointer(String([102, 97, 108, 115, 101, 0]))
    }
  }
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "small_test", path: [] }, item_name: "main" }, body_index: 18, param_count: 0, generic_count: 0 }) }>(small_test::::main())
-> int
Expr type: int
Block (returns: true) {
  Expr type: unit
  Declaration(s)
    Expr type: small_test::::Simple
    Struct
      a: 
      Expr type: int
      Literal(Integer(1))
      b: 
      Expr type: int
      Literal(Integer(2))
  Expr type: int
  FunctionCall
    Function(small_test::::add(int,int))
    Expr type: int
    FieldAccess(a)
      Expr type: small_test::::Simple
      ValueOfAssignable
        LocalVariable(s)
    Expr type: int
    FieldAccess(b)
      Expr type: small_test::::Simple
      ValueOfAssignable
        LocalVariable(s)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["enum_test"] }, item_name: "enum_test" }, body_index: 28, param_count: 0, generic_count: 0 }) }>(test::enum_test::enum_test())
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(&char))
    Expr type: &char
    ConstantPointer(String([69, 78, 85, 77, 32, 84, 69, 83, 84, 0]))
  Expr type: unit
  Declaration(dir)
    Expr type: test::enum_test::Direction
    Literal(Integer(1))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    Unary(Cast)
      Expr type: test::enum_test::Direction
      ValueOfAssignable
        LocalVariable(dir)
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(bool))
    Expr type: bool
    Binary(Comparison(Equals))
      Expr type: test::enum_test::Direction
      Literal(Integer(2))
      Expr type: test::enum_test::Direction
      Literal(Integer(3))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(&char))
    Expr type: &char
    ConstantPointer(String([104, 105, 0]))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    Unary(Cast)
      Expr type: test::enum_test::Direction
      Literal(Integer(2147483647))
  Expr type: unit
  Declaration(from_int)
    Expr type: test::enum_test::Direction
    Unary(Cast)
      Expr type: int
      Sizeof(EnumType(ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["enum_test"] }, item_name: "Direction" }))
  Expr type: unit
  FunctionCall
    Function(test::std::print::println(int))
    Expr type: int
    Unary(Cast)
      Expr type: test::enum_test::Direction
      ValueOfAssignable
        LocalVariable(from_int)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "mem"] }, item_name: "realloc" }, body_index: 31, param_count: 2, generic_count: 1 }) }>(test::std::mem::realloc<_>(_,_))
  pointer: &<0> of test::std::mem::realloc<_>(_,_)
  size: int
-> &<0> of test::std::mem::realloc<_>(_,_)
Expr type: &<0> of test::std::mem::realloc<_>(_,_)
Block (returns: true) {
  Expr type: unit
  FunctionCall
    Function(test::std::mem::free<<0> of test::std::mem::realloc<_>(_,_)>(&<0> of test::std::mem::realloc<_>(_,_)))
    Expr type: &<0> of test::std::mem::realloc<_>(_,_)
    ValueOfAssignable
      LocalVariable(pointer)
  Expr type: &<0> of test::std::mem::realloc<_>(_,_)
  FunctionCall
    Function(test::std::mem::malloc<<0> of test::std::mem::realloc<_>(_,_)>(int))
    Expr type: int
    ValueOfAssignable
      LocalVariable(size)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "mem"] }, item_name: "memcopy" }, body_index: 33, param_count: 3, generic_count: 1 }) }>(test::std::mem::memcopy<_>(_,_,_))
  size: int
  dest: &<0> of test::std::mem::memcopy<_>(_,_,_)
  src: &<0> of test::std::mem::memcopy<_>(_,_,_)
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(builtin::::memcopy(&unit,&unit,int))
    Expr type: &unit
    Unary(Cast)
      Expr type: &<0> of test::std::mem::memcopy<_>(_,_,_)
      ValueOfAssignable
        LocalVariable(dest)
    Expr type: &unit
    Unary(Cast)
      Expr type: &<0> of test::std::mem::memcopy<_>(_,_,_)
      ValueOfAssignable
        LocalVariable(src)
    Expr type: int
    Binary(Math(Mul))
      Expr type: int
      ValueOfAssignable
        LocalVariable(size)
      Expr type: int
      Sizeof(GenericType(GenericId { kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "mem"] }, item_name: "memcopy" }, body_index: 33, param_count: 3, generic_count: 1 }), index: 0 }))
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "generic_sizeof_test" }, body_index: 2, param_count: 0, generic_count: 1 }) }>(test::::generic_sizeof_test<_>())
-> int
Expr type: int
Block (returns: true) {
  Expr type: int
  Sizeof(GenericType(GenericId { kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "generic_sizeof_test" }, body_index: 2, param_count: 0, generic_count: 1 }), index: 0 }))
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["generic_test"] }, item_name: "partial_generic_function" }, body_index: 16, param_count: 1, generic_count: 1 }) }>(test::generic_test::partial_generic_function<_>(_))
  x: <0> of test::generic_test::partial_generic_function<_>(_)
-> test::generic_test::TwoGenerics<<0> of test::generic_test::partial_generic_function<_>(_),test::generic_test::Option<<0> of test::generic_test::partial_generic_function<_>(_)>>
Expr type: test::generic_test::TwoGenerics<<0> of test::generic_test::partial_generic_function<_>(_),test::generic_test::Option<<0> of test::generic_test::partial_generic_function<_>(_)>>
Block (returns: true) {
  Expr type: test::generic_test::TwoGenerics<<0> of test::generic_test::partial_generic_function<_>(_),test::generic_test::Option<<0> of test::generic_test::partial_generic_function<_>(_)>>
  Struct
    value: 
    Expr type: <0> of test::generic_test::partial_generic_function<_>(_)
    ValueOfAssignable
      LocalVariable(x)
    value2: 
    Expr type: test::generic_test::Option<<0> of test::generic_test::partial_generic_function<_>(_)>
    Struct
      value: 
      Expr type: <0> of test::generic_test::partial_generic_function<_>(_)
      ValueOfAssignable
        LocalVariable(x)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["generic_test"] }, item_name: "do_nothing" }, body_index: 10, param_count: 1, generic_count: 1 }) }>(test::generic_test::do_nothing<_>(_))
  x: <0> of test::generic_test::do_nothing<_>(_)
-> <0> of test::generic_test::do_nothing<_>(_)
Expr type: <0> of test::generic_test::do_nothing<_>(_)
Block (returns: true) {
  Expr type: <0> of test::generic_test::do_nothing<_>(_)
  ValueOfAssignable
    LocalVariable(x)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["generic_test"] }, item_name: "add1" }, body_index: 17, param_count: 1, generic_count: 0 }) }>(test::generic_test::add1(_))
  x: int
-> int
Expr type: int
Block (returns: true) {
  Expr type: int
  Binary(Math(Add))
    Expr type: int
    ValueOfAssignable
      LocalVariable(x)
    Expr type: int
    Literal(Integer(1))
}
Function<GenericParams { mapping: {"T": 0, "K": 1}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "generic_sizeof_test" }, body_index: 3, param_count: 0, generic_count: 2 }) }>(test::::generic_sizeof_test<_,_>())
-> int
Expr type: int
Block (returns: true) {
  Expr type: int
  Binary(Math(Mul))
    Expr type: int
    Sizeof(GenericType(GenericId { kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "generic_sizeof_test" }, body_index: 3, param_count: 0, generic_count: 2 }), index: 0 }))
    Expr type: int
    Sizeof(GenericType(GenericId { kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "generic_sizeof_test" }, body_index: 3, param_count: 0, generic_count: 2 }), index: 1 }))
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "mul3" }, body_index: 6, param_count: 1, generic_count: 0 }) }>(test::::mul3(_))
  a: char
-> char
Expr type: char
Block (returns: true) {
  Expr type: char
  ValueOfAssignable
    LocalVariable(a)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "mem"] }, item_name: "free" }, body_index: 29, param_count: 1, generic_count: 1 }) }>(test::std::mem::free<_>(_))
  this: &<0> of test::std::mem::free<_>(_)
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(builtin::::free(&unit))
    Expr type: &unit
    Unary(Cast)
      Expr type: &<0> of test::std::mem::free<_>(_)
      ValueOfAssignable
        LocalVariable(this)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "vec"] }, item_name: "get" }, body_index: 44, param_count: 2, generic_count: 1 }) }>(test::std::vec::get<_>(_,_))
  this: test::std::vec::Vec<<0> of test::std::vec::get<_>(_,_)>
  index: int
-> <0> of test::std::vec::get<_>(_,_)
Expr type: <0> of test::std::vec::get<_>(_,_)
Block (returns: true) {
  Expr type: <0> of test::std::vec::get<_>(_,_)
  FunctionCall
    Function(test::std::vec::get<<0> of test::std::vec::get<_>(_,_)>(&test::std::vec::Vec<<0> of test::std::vec::get<_>(_,_)>,int))
    Expr type: &test::std::vec::Vec<<0> of test::std::vec::get<_>(_,_)>
    Borrow
      LocalVariable(this)
    Expr type: int
    ValueOfAssignable
      LocalVariable(index)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "io"] }, item_name: "open_file" }, body_index: 67, param_count: 1, generic_count: 0 }) }>(test::std::io::open_file(_))
  path: &char
-> test::std::io::File
Expr type: test::std::io::File
Block (returns: true) {
  Expr type: unit
  Declaration(file)
    Expr type: int
    FunctionCall
      Function(builtin::::fopen(&char))
      Expr type: &char
      ValueOfAssignable
        LocalVariable(path)
  Expr type: test::std::io::File
  Struct
    file: 
    Expr type: int
    ValueOfAssignable
      LocalVariable(file)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "array"] }, item_name: "fill" }, body_index: 59, param_count: 2, generic_count: 1 }) }>(test::std::array::fill<_>(_,_))
  this: test::std::array::Array<<0> of test::std::array::fill<_>(_,_)>
  value: <0> of test::std::array::fill<_>(_,_)
-> unit
Expr type: unit
Block (returns: true) {
  Expr type: unit
  Declaration(i)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        LocalVariable(i)
      Expr type: int
      FieldAccess(size)
        Expr type: test::std::array::Array<<0> of test::std::array::fill<_>(_,_)>
        ValueOfAssignable
          LocalVariable(this)
    Expr type: unit
    Block (returns: false) {
      Expr type: <0> of test::std::array::fill<_>(_,_)
      Assign(Assign)
        ArrayIndex
          Expr type: &<0> of test::std::array::fill<_>(_,_)
          FieldAccess(data)
            Expr type: test::std::array::Array<<0> of test::std::array::fill<_>(_,_)>
            ValueOfAssignable
              LocalVariable(this)
          Expr type: int
          ValueOfAssignable
            LocalVariable(i)
        Expr type: <0> of test::std::array::fill<_>(_,_)
        ValueOfAssignable
          LocalVariable(value)
      Expr type: int
      Increment(false)
        LocalVariable(i)
    }
  }
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "array"] }, item_name: "free" }, body_index: 62, param_count: 1, generic_count: 1 }) }>(test::std::array::free<_>(_))
  this: test::std::array::Array<<0> of test::std::array::free<_>(_)>
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(test::std::mem::free<unit>(&unit))
    Expr type: &unit
    Unary(Cast)
      Expr type: &<0> of test::std::array::free<_>(_)
      FieldAccess(data)
        Expr type: test::std::array::Array<<0> of test::std::array::free<_>(_)>
        ValueOfAssignable
          LocalVariable(this)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "array"] }, item_name: "set" }, body_index: 58, param_count: 3, generic_count: 1 }) }>(test::std::array::set<_>(_,_,_))
  index: int
  value: <0> of test::std::array::set<_>(_,_,_)
  this: test::std::array::Array<<0> of test::std::array::set<_>(_,_,_)>
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: <0> of test::std::array::set<_>(_,_,_)
  Assign(Assign)
    ArrayIndex
      Expr type: &<0> of test::std::array::set<_>(_,_,_)
      FieldAccess(data)
        Expr type: test::std::array::Array<<0> of test::std::array::set<_>(_,_,_)>
        ValueOfAssignable
          LocalVariable(this)
      Expr type: int
      ValueOfAssignable
        LocalVariable(index)
    Expr type: <0> of test::std::array::set<_>(_,_,_)
    ValueOfAssignable
      LocalVariable(value)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "io"] }, item_name: "read_chars" }, body_index: 70, param_count: 2, generic_count: 0 }) }>(test::std::io::read_chars(_,_))
  amount: int
  this: test::std::io::File
-> test::std::vec::Vec<char>
Expr type: test::std::vec::Vec<char>
Block (returns: true) {
  Expr type: unit
  Declaration(str)
    Expr type: test::std::vec::Vec<char>
    FunctionCall
      Function(test::std::string::create_sized_string(int))
      Expr type: int
      ValueOfAssignable
        LocalVariable(amount)
  Expr type: int
  FunctionCall
    Function(builtin::::fread(&char,int,int))
    Expr type: &char
    FieldAccess(data)
      Expr type: test::std::vec::Vec<char>
      ValueOfAssignable
        LocalVariable(str)
    Expr type: int
    FieldAccess(size)
      Expr type: test::std::vec::Vec<char>
      ValueOfAssignable
        LocalVariable(str)
    Expr type: int
    FieldAccess(file)
      Expr type: test::std::io::File
      ValueOfAssignable
        LocalVariable(this)
  Expr type: test::std::vec::Vec<char>
  ValueOfAssignable
    LocalVariable(str)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "vec"] }, item_name: "get" }, body_index: 43, param_count: 2, generic_count: 1 }) }>(test::std::vec::get<_>(_,_))
  this: &test::std::vec::Vec<<0> of test::std::vec::get<_>(_,_)>
  index: int
-> <0> of test::std::vec::get<_>(_,_)
Expr type: <0> of test::std::vec::get<_>(_,_)
Block (returns: true) {
  Expr type: unit
  If {
    Expr type: bool
    Binary(Logical(Or))
      Expr type: bool
      Binary(Comparison(Less))
        Expr type: int
        ValueOfAssignable
          LocalVariable(index)
        Expr type: int
        Literal(Integer(0))
      Expr type: bool
      Binary(Comparison(GreaterEquals))
        Expr type: int
        ValueOfAssignable
          LocalVariable(index)
        Expr type: int
        ValueOfAssignable
          PointerFieldAccess(size, 1)
            Expr type: &test::std::vec::Vec<<0> of test::std::vec::get<_>(_,_)>
            ValueOfAssignable
              LocalVariable(this)
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      FunctionCall
        Function(test::std::panic::panic(&char))
        Expr type: &char
        ConstantPointer(String([73, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 0]))
    }
  }
  Expr type: <0> of test::std::vec::get<_>(_,_)
  ValueOfAssignable
    ArrayIndex
      Expr type: &<0> of test::std::vec::get<_>(_,_)
      ValueOfAssignable
        PointerFieldAccess(data, 1)
          Expr type: &test::std::vec::Vec<<0> of test::std::vec::get<_>(_,_)>
          ValueOfAssignable
            LocalVariable(this)
      Expr type: int
      ValueOfAssignable
        LocalVariable(index)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "io"] }, item_name: "print_file" }, body_index: 72, param_count: 1, generic_count: 0 }) }>(test::std::io::print_file(_))
  this: test::std::io::File
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(builtin::::write_char(char))
    Expr type: char
    Literal(Char(91))
  Expr type: unit
  FunctionCall
    Function(test::std::print::print(int))
    Expr type: int
    FieldAccess(file)
      Expr type: test::std::io::File
      ValueOfAssignable
        LocalVariable(this)
  Expr type: unit
  FunctionCall
    Function(builtin::::write_char(char))
    Expr type: char
    Literal(Char(93))
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "string"] }, item_name: "free" }, body_index: 37, param_count: 1, generic_count: 0 }) }>(test::std::string::free(_))
  this: test::std::vec::Vec<char>
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  FunctionCall
    Function(test::std::mem::free<char>(&char))
    Expr type: &char
    FieldAccess(data)
      Expr type: test::std::vec::Vec<char>
      ValueOfAssignable
        LocalVariable(this)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: [] }, item_name: "generic_call_test" }, body_index: 8, param_count: 2, generic_count: 1 }) }>(test::::generic_call_test<_>(_,_))
  fn: fn(<0> of test::::generic_call_test<_>(_,_))-><0> of test::::generic_call_test<_>(_,_)
  val: <0> of test::::generic_call_test<_>(_,_)
-> <0> of test::::generic_call_test<_>(_,_)
Expr type: <0> of test::::generic_call_test<_>(_,_)
Block (returns: true) {
  Expr type: <0> of test::::generic_call_test<_>(_,_)
  FunctionCall
    Expr type: fn(<0> of test::::generic_call_test<_>(_,_))-><0> of test::::generic_call_test<_>(_,_)
    ValueOfAssignable
      LocalVariable(fn)
    Expr type: <0> of test::::generic_call_test<_>(_,_)
    ValueOfAssignable
      LocalVariable(val)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "vec"] }, item_name: "create_vec" }, body_index: 49, param_count: 1, generic_count: 1 }) }>(test::std::vec::create_vec<_>(_))
  initial_capacity: int
-> test::std::vec::Vec<<0> of test::std::vec::create_vec<_>(_)>
Expr type: test::std::vec::Vec<<0> of test::std::vec::create_vec<_>(_)>
Block (returns: true) {
  Expr type: unit
  If {
    Expr type: bool
    Binary(Comparison(LessEquals))
      Expr type: int
      ValueOfAssignable
        LocalVariable(initial_capacity)
      Expr type: int
      Literal(Integer(0))
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      FunctionCall
        Function(test::std::panic::panic(&char))
        Expr type: &char
        ConstantPointer(String([73, 110, 105, 116, 105, 97, 108, 32, 99, 97, 112, 97, 99, 105, 116, 121, 32, 109, 117, 115, 116, 32, 98, 101, 32, 103, 114, 101, 97, 116, 101, 114, 32, 116, 104, 97, 110, 32, 48, 0]))
    }
  }
  Expr type: unit
  Declaration(arr)
    Expr type: test::std::vec::Vec<<0> of test::std::vec::create_vec<_>(_)>
    Struct
      data: 
      Expr type: &<0> of test::std::vec::create_vec<_>(_)
      FunctionCall
        Function(test::std::mem::malloc<<0> of test::std::vec::create_vec<_>(_)>(int))
        Expr type: int
        ValueOfAssignable
          LocalVariable(initial_capacity)
      size: 
      Expr type: int
      Literal(Integer(0))
      capacity: 
      Expr type: int
      ValueOfAssignable
        LocalVariable(initial_capacity)
  Expr type: test::std::vec::Vec<<0> of test::std::vec::create_vec<_>(_)>
  ValueOfAssignable
    LocalVariable(arr)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "vec"] }, item_name: "print" }, body_index: 48, param_count: 1, generic_count: 0 }) }>(test::std::vec::print(_))
  this: test::std::vec::Vec<int>
-> unit
Expr type: unit
Block (returns: false) {
  Expr type: unit
  Declaration(i)
    Expr type: int
    Literal(Integer(0))
  Expr type: unit
  FunctionCall
    Function(builtin::::write_char(char))
    Expr type: char
    Literal(Char(91))
  Expr type: unit
  Loop {
    Expr type: bool
    Binary(Comparison(Less))
      Expr type: int
      ValueOfAssignable
        LocalVariable(i)
      Expr type: int
      FieldAccess(size)
        Expr type: test::std::vec::Vec<int>
        ValueOfAssignable
          LocalVariable(this)
    Expr type: unit
    Block (returns: false) {
      Expr type: unit
      If {
        Expr type: bool
        Binary(Comparison(Greater))
          Expr type: int
          ValueOfAssignable
            LocalVariable(i)
          Expr type: int
          Literal(Integer(0))
        Expr type: unit
        Block (returns: false) {
          Expr type: unit
          FunctionCall
            Function(builtin::::write_char(char))
            Expr type: char
            Literal(Char(44))
          Expr type: unit
          FunctionCall
            Function(builtin::::write_char(char))
            Expr type: char
            Literal(Char(32))
        }
      }
      Expr type: unit
      FunctionCall
        Function(test::std::print::print(int))
        Expr type: int
        ValueOfAssignable
          ArrayIndex
            Expr type: &int
            FieldAccess(data)
              Expr type: test::std::vec::Vec<int>
              ValueOfAssignable
                LocalVariable(this)
            Expr type: int
            ValueOfAssignable
              LocalVariable(i)
      Expr type: int
      Increment(false)
        LocalVariable(i)
    }
  }
  Expr type: unit
  FunctionCall
    Function(builtin::::write_char(char))
    Expr type: char
    Literal(Char(93))
  Expr type: unit
  FunctionCall
    Function(builtin::::write_char(char))
    Expr type: char
    Literal(Char(10))
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "small_test", path: [] }, item_name: "add" }, body_index: 19, param_count: 2, generic_count: 0 }) }>(small_test::::add(_,_))
  a: int
  b: int
-> int
Expr type: int
Block (returns: true) {
  Expr type: int
  Binary(Math(Add))
    Expr type: int
    ValueOfAssignable
      LocalVariable(a)
    Expr type: int
    ValueOfAssignable
      LocalVariable(b)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "string"] }, item_name: "create_sized_string" }, body_index: 35, param_count: 1, generic_count: 0 }) }>(test::std::string::create_sized_string(_))
  size: int
-> test::std::vec::Vec<char>
Expr type: test::std::vec::Vec<char>
Block (returns: true) {
  Expr type: unit
  Declaration(str)
    Expr type: test::std::vec::Vec<char>
    FunctionCall
      Function(test::std::vec::create_sized_vec<char>(int))
      Expr type: int
      ValueOfAssignable
        LocalVariable(size)
  Expr type: test::std::vec::Vec<char>
  ValueOfAssignable
    LocalVariable(str)
}
Function<GenericParams { mapping: {"T": 0}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "vec"] }, item_name: "clone" }, body_index: 54, param_count: 1, generic_count: 1 }) }>(test::std::vec::clone<_>(_))
  this: test::std::vec::Vec<<0> of test::std::vec::clone<_>(_)>
-> test::std::vec::Vec<<0> of test::std::vec::clone<_>(_)>
Expr type: test::std::vec::Vec<<0> of test::std::vec::clone<_>(_)>
Block (returns: true) {
  Expr type: unit
  Declaration(new_vec)
    Expr type: test::std::vec::Vec<<0> of test::std::vec::clone<_>(_)>
    FunctionCall
      Function(test::std::vec::create_vec<<0> of test::std::vec::clone<_>(_)>(int))
      Expr type: int
      FieldAccess(capacity)
        Expr type: test::std::vec::Vec<<0> of test::std::vec::clone<_>(_)>
        ValueOfAssignable
          LocalVariable(this)
  Expr type: unit
  FunctionCall
    Function(test::std::mem::memcopy<<0> of test::std::vec::clone<_>(_)>(&<0> of test::std::vec::clone<_>(_),&<0> of test::std::vec::clone<_>(_),int))
    Expr type: &<0> of test::std::vec::clone<_>(_)
    FieldAccess(data)
      Expr type: test::std::vec::Vec<<0> of test::std::vec::clone<_>(_)>
      ValueOfAssignable
        LocalVariable(this)
    Expr type: &<0> of test::std::vec::clone<_>(_)
    FieldAccess(data)
      Expr type: test::std::vec::Vec<<0> of test::std::vec::clone<_>(_)>
      ValueOfAssignable
        LocalVariable(new_vec)
    Expr type: int
    FieldAccess(size)
      Expr type: test::std::vec::Vec<<0> of test::std::vec::clone<_>(_)>
      ValueOfAssignable
        LocalVariable(this)
  Expr type: int
  Assign(Assign)
    FieldAccess(size)
      LocalVariable(new_vec)
    Expr type: int
    FieldAccess(size)
      Expr type: test::std::vec::Vec<<0> of test::std::vec::clone<_>(_)>
      ValueOfAssignable
        LocalVariable(this)
  Expr type: test::std::vec::Vec<<0> of test::std::vec::clone<_>(_)>
  ValueOfAssignable
    LocalVariable(new_vec)
}
Function<GenericParams { mapping: {}, kind: Function(FunctionId { id: ItemId { module_id: ModuleIdentifier { root_name: "test", path: ["std", "string"] }, item_name: "create_string" }, body_index: 34, param_count: 1, generic_count: 0 }) }>(test::std::string::create_string(_))
  capacity: int
-> test::std::vec::Vec<char>
Expr type: test::std::vec::Vec<char>
Block (returns: true) {
  Expr type: unit
  Declaration(str)
    Expr type: test::std::vec::Vec<char>
    FunctionCall
      Function(test::std::vec::create_vec<char>(int))
      Expr type: int
      ValueOfAssignable
        LocalVariable(capacity)
  Expr type: test::std::vec::Vec<char>
  ValueOfAssignable
    LocalVariable(str)
}