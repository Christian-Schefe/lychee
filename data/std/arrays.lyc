struct IntArray {
    &int data;
    int size;
}

impl IntArray {
    int get(IntArray this, int index) {
        return this.data[index];
    }
    unit set(IntArray this, int index, int value) {
        this.data[index] = value;
    }
    unit fill(IntArray this, int value) {
        let int i = 0;
        while (i < this.size) {
            this.data[i] = value;
            i++;
        }
    }
    unit print(IntArray this) {
        let int i = 0;
        write_char('[');
        while (i < this.size) {
            if i > 0 {
                write_char(',');
                write_char(' ');
            };
            write_num(this.data[i]);
            i++;
        };
        write_char(']');
        write_char('\n');
    }
    IntArray create(int size) {
        let IntArray arr = new IntArray {
            data: malloc(size * 4) as &int,
            size: size
        };
        arr
    }
    unit free(IntArray this) {
        free(this.data as &unit);
    }
}

unit write_num(int num) {
    if num == 0 {
        write_char((num % 10 + '0' as int) as char);
        return;
    } else if num < 0 {
        write_char('-');
        num = -num;
    };

    if num >= 10 {
        write_num(num / 10);
    };
    write_char((num % 10 + '0' as int) as char);
}
