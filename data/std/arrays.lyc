import root::std::print::*;

struct Array<T> {
    &T data;
    int size;
}

T get<T>(Array<T> this, int index) {
    return this.data[index];
}

unit set<T>(Array<T> this, int index, T value) {
    this.data[index] = value;
}

unit fill<T>(Array<T> this, T value) {
    let int i = 0;
    while (i < this.size) {
        this.data[i] = value;
        i++;
    }
}

unit print(Array<int> this) {
    let int i = 0;
    write_char('[');
    while (i < this.size) {
        if i > 0 {
            write_char(',');
            write_char(' ');
        };
        this.data[i].print();
        i++;
    };
    write_char(']');
    write_char('\n');
}

Array<T> createArray<T>(int size) {
    let Array<T> arr = new Array<T> {
        data: malloc(size * sizeof(T)) as &T,
        size: size
    };
    arr
}

unit free<T>(Array<T> this) {
    free(this.data as &unit);
}

Array<K> map<T,K>(Array<T> this, (T) -> K fn) {
    let Array<K> arr = createArray::<K>(this.size);
    let int i = 0;
    while (i < this.size) {
        arr.set::<K>(i, fn(this.get::<T>(i)));
        i++;
    };
    arr
}

Array<T> filter<T>(Array<T> this, (T) -> bool fn) {
    let Array<T> arr = createArray::<T>(this.size);
    let int i = 0;
    let int j = 0;
    while (i < this.size) {
        if fn(this.get::<T>(i)) {
            arr.set::<T>(j, this.get::<T>(i));
            j++;
        };
        i++;
    };
    arr
}