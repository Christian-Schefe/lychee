struct Array<T> {
    &T data;
    int size;
}

T get<T>(Array<T> this, int index) {
    return this.data[index];
}

unit set<T>(Array<T> this, int index, T value) {
    this.data[index] = value;
}

unit fill<T>(Array<T> this, T value) {
    let int i = 0;
    while (i < this.size) {
        this.data[i] = value;
        i++;
    }
}

unit print(Array<int> this) {
    let int i = 0;
    write_char('[');
    while (i < this.size) {
        if i > 0 {
            write_char(',');
            write_char(' ');
        };
        write_num(this.data[i]);
        i++;
    };
    write_char(']');
    write_char('\n');
}

Array<T> createArray<T>(int size) {
    let Array<T> arr = new Array<T> {
        data: malloc(size * 4) as &T,
        size: size
    };
    arr
}

unit free<T>(Array<T> this) {
    free(this.data as &unit);
}

unit write_num(int num) {
    if num < 0 {
        write_char('-');
        num = -num;
    };
    if num <= 9 {
        write_char((num % 10 + '0' as int) as char);
        return;
    };

    let var divisor = 1;

    while num / divisor >= 10 {
        divisor *= 10;
    };

    while divisor > 0 {
        let var digit = num / divisor;
        write_char((digit + '0' as int) as char);
        num %= divisor;
        divisor /= 10;
    };
}