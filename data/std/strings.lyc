struct String {
    &char data;
    int size;
}

String newString(int size) {
    let String str = new String {
        data: malloc(size) as &char,
        size: size
    };
    str
}

String fromLiteral(&char literal) {
    let int size = 0;
    while (literal[size] != '\0') {
        size++;
    };
    let String str = newString(size);
    let int i = 0;
    while (i < size) {
        set(&str, i, literal[i]);
        i++;
    };
    str
}

unit readString(&String str) {
    let int i = 0;
    while (i < str.size) {
        let char c = read_char();
        if c == '\n' || c == '\r' {
            break;
        };
        set(str, i, c);
        i++;
    };
    str.size = i;
}

char get(&String str, int index) {
    return str.data[index];
}

unit set(&String str, int index, char value) {
    str.data[index] = value;
}

unit printString(&String str) {
    let int i = 0;
    while (i < str.size) {
        write_char(get(str, i));
        i++;
    };
    write_char('\n');
}

int stringToInt(&String str) {
    let int i = 0;
    let int num = 0;
    let int sign = 1;
    if get(str, 0) == '-' {
        sign = -1;
        i++;
    };
    while (i < str.size) {
        num = num * 10 + (get(str, i) as int - '0' as int);
        i++;
    };
    num * sign
}

unit write_num(int num) {
    if num == 0 {
        write_char((num % 10 + '0' as int) as char);
        return;
    } else if num < 0 {
        write_char('-');
        num = -num;
    };

    if num >= 10 {
        write_num(num / 10);
    };
    write_char((num % 10 + '0' as int) as char);
}

unit print_literal(&char literal) {
    let int i = 0;
    while (literal[i] != '\0') {
        write_char(literal[i]);
        i++;
    };
}