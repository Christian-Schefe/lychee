import root::std::panic::*;
import root::std::print::*;
import root::std::mem::*;
import builtin::{write_char};

struct Vec<T> {
    &T data;
    int size;
    int capacity;
}

T get<T>(Vec<T> this, int index) {
    if index < 0 || index >= this.size {
        panic("Index out of bounds");
    };
    return this.data[index];
}

unit set<T>(Vec<T> this, int index, T value) {
    if index < 0 || index >= this.size {
        panic("Index out of bounds");
    };
    this.data[index] = value;
}

unit fill<T>(Vec<T> this, T value) {
    let int i = 0;
    while (i < this.size) {
        this.data[i] = value;
        i++;
    }
}

unit print(Vec<int> this) {
    let int i = 0;
    write_char('[');
    while (i < this.size) {
        if i > 0 {
            write_char(',');
            write_char(' ');
        };
        this.data[i].print();
        i++;
    };
    write_char(']');
    write_char('\n');
}

Vec<T> create_vec<T>(int initial_capacity) {
    if initial_capacity <= 0 {
        panic("Initial capacity must be greater than 0");
    };
    let Vec<T> arr = new Vec<T> {
        data: malloc::<T>(initial_capacity),
        size: 0,
        capacity: initial_capacity
    };
    arr
}

Vec<T> create_sized_vec<T>(int size) {
    let Vec<T> arr = new Vec<T> {
        data: malloc::<T>(size),
        size: size,
        capacity: size
    };
    memset::<T>(arr.data, 0, size);
    arr
}

unit free<T>(Vec<T> this) {
    free::<T>(this.data);
}

unit push<T>(&Vec<T> this, T value) {
    if this.size == this.capacity {
        this.capacity *= 2;
        let var new_data = realloc::<T>(this.data, this.capacity);
        memcopy::<T>(this.data, new_data, this.size);
        this.data = new_data;
    };
    this.data[this.size] = value;
    this.size++;
}

T pop<T>(&Vec<T> this) {
    if this.size == 0 {
        panic("Pop from empty Vec");
    };
    this.size--;
    let T value = this.data[this.size];
    if this.size < this.capacity / 2 {
        this.capacity /= 2;
        let var new_data = realloc::<T>(this.data, this.capacity);
        memcopy::<T>(this.data, new_data, this.size);
        this.data = new_data;
    };
    value
}

Vec<T> clone<T>(Vec<T> this) {
    let Vec<T> new_vec = create_vec::<T>(this.capacity);
    memcopy::<T>(this.data, new_vec.data, this.size);
    new_vec.size = this.size;
    new_vec
}

Vec<K> map<T,K>(Vec<T> this, (T) -> K fn) {
    let Vec<K> arr = create_vec::<K>(this.size);
    let int i = 0;
    while (i < this.size) {
        (&arr).push(fn(this.get(i)));
        i++;
    };
    arr
}

unit foreach<T>(Vec<T> this, (T) -> unit fn) {
    let int i = 0;
    while (i < this.size) {
        fn(this.get(i));
        i++;
    };
}
