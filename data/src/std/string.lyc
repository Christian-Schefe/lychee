import root::std::vec::*;
import builtin::{write, read_char, read};
import root::std::mem::free;

alias String = Vec<char>;

String create_string(int capacity) {
    let var str = create_vec::<char>(capacity);
    str
}

String create_sized_string(int size) {
    let var str = create_sized_vec::<char>(size);
    str
}

unit print(String this) {
    write(this.data, this.size);
}

unit free(String this) {
    free(this.data);
}

String from_literal(&char literal) {
    let int size = 0;
    while (literal[size] != '\0') {
        size++;
    };
    let String str = create_string(size);
    let int i = 0;
    while (i < size) {
        set(&str, i, literal[i]);
        i++;
    };
    str
}

String read_line() {
    let var str = create_string(100);
    let int i = 0;
    while (i < str.size) {
        let char c = read_char();
        if c == '\n' || c == '\r' {
            break;
        };
        set(&str, i, c);
        i++;
    };
    str.size = i;
    str
}

String concat(&String str1, &String str2) {
    let String str = create_string(str1.size + str2.size);
    let int i = 0;
    while (i < str1.size) {
        set(&str, i, get(str1, i));
        i++;
    };
    let int j = 0;
    while (j < str2.size) {
        set(&str, i, get(str2, j));
        i++;
        j++;
    };
    str
}

unit read_string(&String str) {
    read(str.data, str.size);
}

char get(&String str, int index) {
    return str.data[index];
}

unit set(&String str, int index, char value) {
    str.data[index] = value;
}

int parse_int(&String str) {
    let int i = 0;
    let int num = 0;
    let int sign = 1;
    if get(str, 0) == '-' {
        sign = -1;
        i++;
    };
    while (i < str.size) {
        num = num * 10 + (get(str, i) as int - '0' as int);
        i++;
    };
    num * sign
}
