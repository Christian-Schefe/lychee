module generic_test;
module enum_test;
module std;

import root::generic_test::{createStruct, test, MyStructIntInt, MyStruct};
import root::std::array::*;
import root::std::print::*;
import root::std::vec::*;

import small_test::add;

int main() {
    let Test arr = create_array::<int>(100);
    arr.fill(10);
    arr.set(8, generic_sizeof_test::<MyStruct<char, long>, int>());
    for (let int i = 0; i < 5; i++) {
        arr.set(i, i);
        continue.unit_test(break);
        arr.set(i, i + 50);
    };
    arr.print();
    let MyStructIntInt my_struct = createStruct(10, 20, 30);
    ::std::io::file_test();
    generic_sizeof_test::<int>();

    let TestEnum test_enum = TestEnum::A;
    (TestEnum::D as int).println();
    println(TestEnum::D == TestEnum::B);
    println("hi");
    (TestEnum::E as int).print();
    ::enum_test::enum_test();
    println("END TEST");
    let (int) -> int test_fn = mul2;
    let int a = test_fn(10);
    a.println();
    test_fn(10).println();
    call_test_fn(test_fn, 10).println();
    println("END TEST 2");
    let ((int) -> int, int) -> int test_fn2 = generic_call_test::<int>;
    let int b = test_fn2(test_fn, 12);
    b.println();
    let var arr2 = arr.map(test_fn);
    arr2.print();

    let var vec = create_vec::<int>(1);
    (&vec).push(10);
    (&vec).push(20);
    vec.print();
    (&vec).push(30);
    let var cloned_vec = vec.clone();
    cloned_vec.print();
    vec.print();
    vec.capacity.println();
    (&vec).push(40);
    (&vec).push(50);
    vec.print();
    vec.capacity.println();
    let var vec2 = vec.map(mul2);
    vec2.print();
    (&vec).pop().println();
    (&vec).pop().println();
    (&vec).pop().println();
    (&vec).pop().println();
    vec.print();

    let (int) -> unit printer = println;
    vec2.foreach(printer);

    println("TUPLE TEST");
    let (int, int) tuple = (-11,-22);
    let (char, int) tuple2 = tuple_test('c', 10);
    tuple.item2.println();
    tuple2.item1.println();
    let ((int, int), (int, int)) tuple_2d = (tuple, tuple);
    sizeof(((int, int, int), (int, int, int), long, int, long, int, long, long, long)).println();
    tuple_2d.item1.item2.println();
    sizeof(A<A<A<A<A<A<int>>>>>>).println();

    let A<A<int>> A = new A<A<int>> {
        a: new A<int> {
            a: 10,
            b: 20
        },
        b: new A<int> {
            a: 30,
            b: 40
        }
    };

    let ::enum_test::Direction dir = ::enum_test::Direction::Up;
    (dir as int).println();

    let int extern_test = small_test::add(10, 20).add(20);
    extern_test.println();

    println("MEM TEST");
    let var vec3 = create_sized_vec::<int>(5);
    vec3.print();

    println("PANIC TEST");
    (&vec).pop().println();
    (&vec).pop().println();

    test() + arr.get(9)
}

unit my_println(int a) {
    a.println()
}

struct A<T> {
    T a;
    T b;
}

enum TestEnum {
    A,
    B,
    C = 100,
    D = 1,
    E = -240,
}


alias Test = Array<int>;

int generic_sizeof_test<T>() {
    sizeof(T)
}

int generic_sizeof_test<T, K>() {
    sizeof(T) * sizeof(K)
}

unit unit_test(unit a, unit b) {
    a
}

int mul2(int a) {
    a * 2
}

char mul3(char a) {
    a
}

int call_test_fn((int) -> int fn, int val) {
    fn(val)
}

T generic_call_test<T>((T) -> T fn, T val) {
    fn(val)
}

(T, int) tuple_test<T>(T a, int b) {
    (a, b)
}